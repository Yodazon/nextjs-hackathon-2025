TITLE: Implementing Chat API Route with OpenAI and Tool Integration in TypeScript
DESCRIPTION: This code creates the backend API route that powers the chatbot. It uses OpenAI's GPT-4o model with the ability to add and retrieve content from a knowledge base using Upstash Vector. The implementation includes tools for creating resources and finding relevant content, with streaming responses enabled for up to 30 seconds.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai'
import { streamText, tool } from 'ai'
import { z } from 'zod'

// Tools
import { createResource } from '@/lib/actions/resources'
import { findRelevantContent } from '@/lib/ai/upstashVector'

// Allow streaming responses up to 30 seconds
export const maxDuration = 30

export async function POST(req: Request) {
  const { messages } = await req.json()

  const result = streamText({
    // 1. Choose your AI model
    model: openai('gpt-4o'),

    // 2. Pass along the conversation messages from the user
    messages,

    // 3. Prompt the model
    system: `You are a helpful RAG assistant. 
    You have the ability to add and retrieve content from your knowledge base.
    Only respond to the user with information found in your knowledge base.
    If no relevant information is found, respond with: "Sorry, I don't know."`,

    // 4. Provide your "tools": resource creation & retrieving content
    tools: {
      addResource: tool({
        description: `Add new content to the knowledge base.`,
        parameters: z.object({
          content: z.string().describe('The content to embed and store'),
        }),
        execute: async ({ content }) => {
          const msg = await createResource({ content })
          return msg
        },
      }),
      getInformation: tool({
        description: `Retrieve relevant knowledge from your knowledge base to answer user queries.`,
        parameters: z.object({
          question: z.string().describe('The question to search for'),
        }),
        execute: async ({ question }) => {
          const hits = await findRelevantContent(question)
          // Return array of metadata for each chunk
          // e.g. [{ id, score, metadata: { resourceId, content }}, ... ]
          return hits
        },
      }),
    },
  })

  // 5. Return the streaming response
  return result.toDataStreamResponse()
}

----------------------------------------

TITLE: Querying Vectors with Metadata
DESCRIPTION: Examples showing how to query vectors while including metadata in the results. Includes options for setting top-k results and metadata filtering.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    [0.9215, 0.3897],
    top_k=5,
    include_metadata=True,
)

LANGUAGE: json
CODE:
{
  "result": [
    {
      "id": "id-0",
      "score": 1,
      "metadata": {
        "url": "https://imgur.com/z9AVZLb"
      }
    },
    {
      "id": "id-3",
      "score": 0.99961007,
      "metadata": {
        "url": "https://imgur.com/zfOPmnI"
      }
    }
  ]
}

----------------------------------------

TITLE: Implementing RAG Application with Gradio Interface
DESCRIPTION: Complete implementation of the question answering function that retrieves relevant documents from Upstash Vector and uses a Hugging Face QA model to generate answers, all wrapped in a Gradio interface for user interaction.

LANGUAGE: python
CODE:
# Set up a Hugging Face Question Answering model
qa_pipeline = pipeline("question-answering", model="distilbert-base-cased-distilled-squad")

# Gradio interface function
def answer_question(query):
    # Retrieve relevant documents from Upstash Vector
    results = vector_store.similarity_search(query, k=3)
    
    # Use the most relevant document for QA
    if results:
        context = results[0].page_content
        qa_input = {"question": query, "context": context}
        answer = qa_pipeline(qa_input)["answer"]
        return f"Answer: {answer}\n\nContext: {context}"
    else:
        return "No relevant context found."

# Set up Gradio interface
iface = gr.Interface(
    fn=answer_question,
    inputs="text",
    outputs="text",
    title="RAG Application",
    description="Ask a question, and the app will retrieve relevant information and provide an answer."
)

# Launch the Gradio app
iface.launch()

----------------------------------------

TITLE: Querying Upstash Vector Index with Improved Type Checking
DESCRIPTION: This snippet demonstrates how to use TypeScript generics to improve type checking when querying an Upstash Vector index. It defines a custom metadata type and uses it to ensure type safety when accessing metadata fields in the query results.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string,
  genre: 'sci-fi' | 'fantasy' | 'horror' | 'action'
}

const results = await index.query<Metadata>({
  vector: [
    ... // query embedding
  ],
  includeVectors: true,
  topK: 1,
  filter: "genre = 'fantasy' and title = 'Lord of the Rings'"
})

if (results[0].metadata) {
  // Since we passed the Metadata type parameter above,
  // we can interact with metadata fields without having to
  // do any typecasting.
  const { title, genre } = results[0].metadata;
  console.log(`The best match in fantasy was ${title}`)
}

----------------------------------------

TITLE: Custom Embedding Model Integration with OpenAI
DESCRIPTION: Implementation using OpenAI's text-embedding-ada-002 model for generating and managing embeddings with Upstash Vector.

LANGUAGE: typescript
CODE:
import { Index } from '@upstash/vector'
import { embed, embedMany } from 'ai'
import { openai } from '@ai-sdk/openai'

const index = new Index({
  url: process.env.UPSTASH_VECTOR_REST_URL!,
  token: process.env.UPSTASH_VECTOR_REST_TOKEN!,
})

function generateChunks(input: string): string[] {
  return input
    .trim()
    .split('.')
    .filter(i => i !== '')
}

const embeddingModel = openai.embedding('text-embedding-ada-002')

async function generateEmbedding(value: string): Promise<number[]> {
  const input = value.replaceAll('\\n', ' ')
  const { embedding } = await embed({
    model: embeddingModel,
    value: input,
  })
  return embedding
}

async function generateEmbeddings(
  value: string,
): Promise<Array<{ content: string; embedding: number[] }>> {
  const chunks = generateChunks(value)
  const { embeddings } = await embedMany({
    model: embeddingModel,
    values: chunks,
  })
  return embeddings.map((vector, i) => ({
    content: chunks[i],
    embedding: vector,
  }))
}

export async function upsertEmbeddings(resourceId: string, content: string) {
  const chunkEmbeddings = await generateEmbeddings(content)
  const toUpsert = chunkEmbeddings.map((chunk, i) => ({
    id: `${resourceId}-${i}`,
    vector: chunk.embedding,
    metadata: {
      resourceId,
      content: chunk.content,
    },
  }))

  await index.upsert(toUpsert)
}

export async function findRelevantContent(query: string, k = 4) {
  const userEmbedding = await generateEmbedding(query)
  const result = await index.query({
    vector: userEmbedding,
    topK: k,
    includeMetadata: true,
  })

  return result
}

----------------------------------------

TITLE: Custom Reranking Implementation
DESCRIPTION: Examples of implementing custom reranking by querying dense and sparse components separately

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

dense_results = index.query(
    vector=[0.5, 0.4],
)

sparse_results = index.query(
    sparse_vector=SparseVector([3, 5], [0.3, 0.5]),
)

# Rerank dense and sparse results as you like here

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

const denseResults = await index.query(
  {
    vector: [0.5, 0.4],
    topK: 3,
  },
)

const sparseResults = await index.query(
  {
    sparseVector: {
      indices: [2, 3],
      values: [0.13, 0.87],
    },
    topK: 3,
  },
)

// Rerank dense and sparse results as you like here

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	denseScores, err := index.Query(vector.Query{
		Vector: []float32{0.5, 0.4},
	})

	sparseScores, err := index.Query(vector.Query{
		SparseVector: &vector.SparseVector{
			Indices: []int32{3, 5},
			Values:  []float32{0.3, 05},
		},
	})

	// Rerank dense and sparse results as you like here
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$denseResults = $index->query(new VectorQuery(
  vector: [0.5, 0.4],
  topK: 3,
));

$sparseResults = $index->query(new VectorQuery(
  sparseVector: new SparseVector(
    indices: [3, 5],
    values: [0.3, 0.5],
  ),
  topK: 3,
));

// Rerank dense and sparse results as you like here

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"vector": [0.5, 0.4]}'

curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"sparseVector": {"indices": [3, 5], "values": [0.3, 0.5]}}'

----------------------------------------

TITLE: Querying the LlamaIndex with Upstash Vector in Python
DESCRIPTION: This Python code snippet shows how to query the created index using LlamaIndex. It initializes a query engine and performs two example queries related to global warming and carbon footprint reduction.

LANGUAGE: python
CODE:
# Initialize the query engine
query_engine = index.as_query_engine()

# Perform queries
response_1 = query_engine.query("What is global warming?")
print(response_1)

response_2 = query_engine.query("How can we reduce our carbon footprint?")
print(response_2)

----------------------------------------

TITLE: Batch Query Operations with Upstash Vector in Python
DESCRIPTION: This snippet shows how to perform multiple vector queries in a single call to reduce latency. It demonstrates creating multiple query configurations with different parameters and processing the batch results.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index

index = Index.from_env()

# Generate a random vector for similarity comparison
dimension = 128  # Adjust based on your index's dimension
query_vectors = [[random.random() for _ in range(dimension)] for _ in range(2)]

# Execute the query
query_results = index.query_many(
    queries=[
        {
            "vector": query_vectors[0],
            "include_metadata": True,
            "include_data": True,
            "include_vectors": False,
            "top_k": 5,
            "filter": "genre = 'fantasy' and title = 'Lord of the Rings'",
        },
        {
            "vector": query_vectors[1],
            "include_metadata": False,
            "include_data": False,
            "include_vectors": True,
            "top_k": 3,
            "filter": "genre = 'drama'",
        },
    ]
)

for i, query_result in enumerate(query_results):
    print(f"Query-{i} result:")

    # Print the query result
    for result in query_result:
        print("Score:", result.score)
        print("ID:", result.id)
        print("Vector:", result.vector)
        print("Metadata:", result.metadata)
        print("Data:", result.data)

----------------------------------------

TITLE: Inserting Documents into Vector Store
DESCRIPTION: Adding processed documents to the Upstash Vector index.

LANGUAGE: python
CODE:
inserted_vectors = store.add_documents(docs)

----------------------------------------

TITLE: DBSF Implementation in Multiple Languages
DESCRIPTION: Examples of implementing Distribution-Based Score Fusion algorithm for combining dense and sparse vector search results

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import FusionAlgorithm, SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    vector=[0.5, 0.4],
    sparse_vector=SparseVector([3, 5], [0.3, 0.5]),
    fusion_algorithm=FusionAlgorithm.DBSF,
)

LANGUAGE: javascript
CODE:
import { FusionAlgorithm, Index } from "@upstash/vector";

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
});

await index.query({
  vector: [0.5, 0.4],
  sparseVector: {
    indices: [2, 3],
    values: [0.13, 0.87],
  },
  fusionAlgorithm: FusionAlgorithm.DBSF,
  topK: 3,
});

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	scores, err := index.Query(vector.Query{
		Vector: []float32{0.5, 0.4},
		SparseVector: &vector.SparseVector{
			Indices: []int32{3, 5},
			Values:  []float32{0.3, 05},
		},
		FusionAlgorithm: vector.FusionAlgorithmDBSF,
	})
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;
use Upstash\Vector\Enums\FusionAlgorithm;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->query(new VectorQuery(
  vector: [0.5, 0.4],
  sparseVector: new SparseVector(
    indices: [3, 5],
    values: [0.3, 0.5],
  ),
  topK: 5,
  includeMetadata: true,
  fusionAlgorithm: FusionAlgorithm::DISTRIBUTION_BASED_SCORE_FUSION,
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"vector": [0.5, 0.4], "sparseVector": {"indices": [3, 5], "values": [0.3, 0.5]}, "fusionAlgorithm": "DBSF"}'

----------------------------------------

TITLE: Complete Example of Resumable Query Usage in Python with Upstash Vector Database
DESCRIPTION: This comprehensive example demonstrates creating an index, upserting vectors, starting a resumable query, fetching and processing results, and stopping the query in Upstash Vector Database using Python.

LANGUAGE: python
CODE:
from upstash_vector import Index

# Create an index instance
index = Index()

# Upsert vectors into the index
index.upsert(
    vectors=[
        ("id1", [0.1, 0.2], {"field": "value1"}),
        ("id2", [0.3, 0.4], {"field": "value2"}),
        ("id3", [0.5, 0.6], {"field": "value3"}),
    ],
    namespace="example-namespace"
)

# Start a resumable query
query = index.resumable_query(
    vector=[0.1, 0.2],
    top_k=2,
    include_metadata=True,
    include_vectors=True,
    namespace="example-namespace"
)

# Fetch initial results
results = query.start()

# Access result data
for result in results:
    print(f"ID: {result.id}, Metadata: {result.metadata}")

# Stop the query when done
query.stop()

----------------------------------------

TITLE: Batch Querying Vector Data with curl
DESCRIPTION: curl command for performing batch vector queries using the Upstash Vector REST API. This example sends two different queries in one request, each with different parameters including different text and number of results to return.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[
        {
          "data": "What is Upstash?",
          "topK": 2,
          "includeMetadata": true
        },
        {
          "data": "What is Upstash Vector?",
          "topK": 3
        }
      ]'

----------------------------------------

TITLE: Setting up LlamaIndex with Upstash Vector Store and Indexing Documents
DESCRIPTION: Creates an Upstash Vector store instance, loads documents about global warming, initializes a storage context, and creates a vector index from the documents with 1536 dimensions and cosine distance metric.

LANGUAGE: python
CODE:
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader
from llama_index.vector_stores.upstash import UpstashVectorStore
from llama_index.core import StorageContext
import openai
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
openai.api_key = os.environ["OPENAI_API_KEY"]

# Setup the Upstash vector store 
upstash_vector_store = UpstashVectorStore(
    url=os.environ["UPSTASH_VECTOR_REST_URL"],
    token=os.environ["UPSTASH_VECTOR_REST_TOKEN"],
)

# Read the document about global warming from the documents directory
documents = SimpleDirectoryReader("./documents/").load_data()

# Initialize the storage context with the Upstash vector store
storage_context = StorageContext.from_defaults(vector_store=upstash_vector_store)

# Create the index from the loaded document with 1536 dimensions and cosine distance
index = VectorStoreIndex.from_documents(
    documents, storage_context=storage_context
)

----------------------------------------

TITLE: Using LangChain with Upstash Vector for Semantic Search
DESCRIPTION: This Python script demonstrates how to use LangChain with Upstash Vector. It includes loading environment variables, creating a vector store instance, adding documents to the index, and performing a similarity search. The script showcases the basic workflow for semantic search using these technologies.

LANGUAGE: python
CODE:
from dotenv import load_dotenv
from langchain_community.vectorstores.upstash import UpstashVectorStore
from langchain.schema import Document

# Load environment variables
load_dotenv()

# Create a vector store instance
store = UpstashVectorStore(
    embedding=True,  # Embedding option enabled
)

# Sample documents to upload
documents = [
    Document(page_content="Upstash Vector is a scalable vector database."),
    Document(page_content="LangChain is a framework for building intelligent apps."),
    Document(page_content="Semantic search enables advanced query matching."),
]

# Add documents to the Upstash Vector index
store.add_documents(documents)

# Perform a similarity search
query = "What is LangChain?"
results = store.similarity_search(query, k=3)

print("Similarity Search Results:")
for res in results:
    print(res.page_content)

----------------------------------------

TITLE: RRF Implementation in Multiple Languages
DESCRIPTION: Examples of implementing Reciprocal Rank Fusion algorithm for combining dense and sparse vector search results across different programming languages

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import FusionAlgorithm, SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    vector=[0.5, 0.4],
    sparse_vector=SparseVector([3, 5], [0.3, 0.5]),
    fusion_algorithm=FusionAlgorithm.RRF,
)

LANGUAGE: javascript
CODE:
import { FusionAlgorithm, Index } from "@upstash/vector";

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
});

await index.query({
  vector: [0.5, 0.4],
  sparseVector: {
    indices: [2, 3],
    values: [0.13, 0.87],
  },
  fusionAlgorithm: FusionAlgorithm.RRF,
  topK: 3,
});

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	scores, err := index.Query(vector.Query{
		Vector: []float32{0.5, 0.4},
		SparseVector: &vector.SparseVector{
			Indices: []int32{3, 5},
			Values:  []float32{0.3, 05},
		},
		FusionAlgorithm: vector.FusionAlgorithmRRF,
	})
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;
use Upstash\Vector\Enums\FusionAlgorithm;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->query(new VectorQuery(
  vector: [0.5, 0.4],
  sparseVector: new SparseVector(
    indices: [3, 5],
    values: [0.3, 0.5],
  ),
  topK: 5,
  includeMetadata: true,
  fusionAlgorithm: FusionAlgorithm::RECIPROCAL_RANK_FUSION,
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"vector": [0.5, 0.4], "sparseVector": {"indices": [3, 5], "values": [0.3, 0.5]}, "fusionAlgorithm": "RRF"}'

----------------------------------------

TITLE: Inserting Data into Upstash Vector Index
DESCRIPTION: This code snippet demonstrates how to insert (upsert) a vector with metadata into an Upstash Vector index. It includes examples for Python, JavaScript, Go, PHP, and curl.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(url="UPSTASH_VECTOR_REST_URL", token="UPSTASH_VECTOR_REST_TOKEN")

index.upsert(
  vectors=[
    ("1", [0.6, 0.8], {"field": "value"}),
  ]
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector";

const index = new Index({
    url: "UPSTASH_VECTOR_REST_URL",
    token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert({ id: "1", vector: [0.6, 0.8], metadata: {field: "value"} })

LANGUAGE: go
CODE:
import "github.com/upstash/vector-go"

func main() {
  index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

  index.Upsert(vector.Upsert{
	  Id:       "1",
	  Vector:   []float32{0.6, 0.8},
	  Metadata: map[string]any{"field": "value"},
  })
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN', 
);

$index->upsert(new VectorUpsert(
  id: '1',
  vector: [0.6, 0.8],
  metadata: ['field' => 'value'],
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"id": "1", "vector": [0.6, 0.8], "metadata": {"field": "value"}}'

----------------------------------------

TITLE: Indexing and Querying Parsed Content with Upstash Vector in Python
DESCRIPTION: This code snippet shows how to index the parsed document using Upstash Vector and perform a query on the indexed content. It sets up the Upstash Vector Store, creates a storage context, and uses VectorStoreIndex for indexing and querying.

LANGUAGE: python
CODE:
from llama_index.core import VectorStoreIndex
from llama_index.vector_stores.upstash import UpstashVectorStore
from llama_index.core import StorageContext
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Set up Upstash Vector Store
vector_store = UpstashVectorStore(
    url=os.getenv("UPSTASH_VECTOR_REST_URL"),
    token=os.getenv("UPSTASH_VECTOR_REST_TOKEN")
)

# Create storage context and index the parsed document
storage_context = StorageContext.from_defaults(vector_store=vector_store)
index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)

# Perform a query
query_engine = index.as_query_engine()
response = query_engine.query("What is the main topic discussed in the document?")

----------------------------------------

TITLE: Executing the Python Script
DESCRIPTION: Command to run the semantic search implementation

LANGUAGE: bash
CODE:
python main.py

----------------------------------------

TITLE: Querying with Dense and Sparse Vectors in Python
DESCRIPTION: Example of querying an Upstash Vector hybrid index using dense and sparse vectors in Python. This method allows for precise control over the query vectors.

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    vector=[0.5, 0.4],
    sparse_vector=SparseVector([3, 5], [0.3, 0.5]),
    top_k=5,
    include_metadata=True,
)

----------------------------------------

TITLE: Querying Upstash Vector Index
DESCRIPTION: This code snippet shows how to perform a similarity search on an Upstash Vector index. It includes examples for Python, JavaScript, Go, PHP, and curl. The query includes a vector, top_k parameter, and metadata inclusion.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(url="UPSTASH_VECTOR_REST_URL", token="UPSTASH_VECTOR_REST_TOKEN")

index.query(
    vector=[0.6, 0.8],
    top_k=3,
    include_metadata=True,
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector";

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query({ vector: [0.6, 0.8], topK: 3, includeMetadata: true })

LANGUAGE: go
CODE:
import "github.com/upstash/vector-go"

func main() {
  index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

  index.Query(vector.Query{
	  Vector:          []float32{0.6, 0.8},
	  TopK:            3,
	  IncludeMetadata: true,
  })
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: '<UPSTASH_VECTOR_REST_URL>',
  token: '<UPSTASH_VECTOR_REST_TOKEN>',
);

$index->query(new VectorQuery(
  vector: [0.6, 0.8],
  topK: 3,
  includeMetadata: true,
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"vector": [0.6, 0.8], "topK": 3, "includeMetadata": "true"}'

----------------------------------------

TITLE: Implementing Semantic Search with Upstash Vector in Python
DESCRIPTION: Complete Python implementation for semantic search including index initialization, document insertion, and similarity querying with automatic embedding generation

LANGUAGE: python
CODE:
from upstash_vector import Index
from dotenv import load_dotenv
import time

# Load environment variables from a .env file
load_dotenv()

# Initialize the index from environment variables (URL and token)
index = Index.from_env()

# Example documents to be indexed
documents = [
    {"id": "1", "text": "Python is a popular programming language."},
    {"id": "2", "text": "Machine learning enables computers to learn from data."},
    {"id": "3", "text": "Upstash provides low-latency database solutions."},
    {"id": "4", "text": "Semantic search is a technique for understanding the meaning of queries."},
    {"id": "5", "text": "Cloud computing allows for scalable and flexible resource management."}
]

# Reset the index to remove previous data
index.reset()

# Upsert documents into Upstash (embeddings are generated automatically)
for doc in documents:
    index.upsert(
        vectors=[
            (doc["id"], doc["text"], {"text": doc["text"]})
        ]
    )
    print(f"Document {doc['id']} inserted.")

# Wait for the documents to be indexed
time.sleep(1)

# Search for documents similar to the query
query = "What is Python?"
results = index.query(data=query, top_k=3, include_metadata=True)

# Display search results
print("Search Results:")
for result in results:
    print(f"ID: {result.id}")
    print(f"Score: {result.score:.4f}")
    print(f"Metadata: {result.metadata}")
    print("-" * 40)  # Separator line between results

----------------------------------------

TITLE: Querying the LlamaIndex with Upstash Vector Store
DESCRIPTION: Initializes a query engine from the vector index and performs two example queries about global warming, demonstrating the RAG functionality for retrieving relevant information.

LANGUAGE: python
CODE:
# Initialize the query engine
query_engine = index.as_query_engine()

# Query the document about global warming
res1 = query_engine.query("What is global warming?")
print(res1)

res2 = query_engine.query("How should we modify our diets to reduce our carbon footprint?")
print(res2)

----------------------------------------

TITLE: Creating and Using Async Resumable Query in Python for Upstash Vector Database
DESCRIPTION: This snippet illustrates the asynchronous usage of resumable queries, including creating, starting, fetching results, and stopping the query using the AsyncIndex class.

LANGUAGE: python
CODE:
query = await async_index.resumable_query(
  vector=[0.1, 0.2],
  top_k=2,
  include_metadata=True,
  include_vectors=True,
  namespace='your_namespace'
)

initial_results = await query.async_start()

next_results = await query.async_fetch_next(number_of_results)

stop_result = await query.async_stop()
assert stop_result == 'Success'

----------------------------------------

TITLE: Resuming a Query in Python
DESCRIPTION: Continues a previously started resumable query in Python by fetching additional results. The code demonstrates fetching the next 3 and then 5 most similar vectors using the handle from the initial query.

LANGUAGE: python
CODE:
# next batch of the results
next_result = handle.fetch_next(
    additional_k=3,
)

for r in next_result:
    print(r)

# it is possible to call fetch_next more than once
next_result = handle.fetch_next(
    additional_k=5,
)

for r in next_result:
    print(r)

----------------------------------------

TITLE: Upserting Dense and Sparse Vectors in Python
DESCRIPTION: Example of how to upsert dense and sparse vectors into an Upstash Vector index using Python. This method allows for full control over the vector representations.

LANGUAGE: python
CODE:
from upstash_vector import Index, Vector
from upstash_vector.types import SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    vectors=[
        Vector(id="id-0", vector=[0.1, 0.5], sparse_vector=SparseVector([1, 2], [0.1, 0.2])),
        Vector(id="id-1", vector=[0.3, 0.7], sparse_vector=SparseVector([123, 44232], [0.5, 0.4])),
    ]
)

----------------------------------------

TITLE: Building React Chat UI with Vercel AI SDK in TypeScript
DESCRIPTION: This code implements the frontend chatbot UI using the Vercel AI SDK's useChat hook. It renders messages, handles user input, and supports displaying tool invocations. The chat interface includes a message history display area and a form for submitting new messages.

LANGUAGE: typescript
CODE:
'use client'

import { useChat } from 'ai/react'

export default function Home() {
  // This hook handles message state + streaming from /api/chat
  const { messages, input, handleInputChange, handleSubmit } = useChat({
    // You can enable multi-step calls if you want the model to call multiple tools in one session
    maxSteps: 3,
  })

  return (
    <div className="mx-auto max-w-md py-6">
      <h1 className="text-xl font-bold mb-4">RAG Chatbot with Upstash Vector</h1>
      
      {/* Render messages */}
      <div className="space-y-2 mb-8">
        {messages.map(m => (
          <div key={m.id} className="border p-2 rounded">
            <strong>{m.role}:</strong> 
            <div>
              {/* If the model calls a tool, show which tool it called */}
              {m.content.length > 0 ? (
                m.content
              ) : (
                <i>calling tool: {m?.toolInvocations?.[0]?.toolName}</i>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Text input */}
      <form onSubmit={handleSubmit} className="flex gap-2">
        <input
          className="flex-1 border rounded px-2 py-1"
          placeholder="Say something..."
          value={input}
          onChange={handleInputChange}
        />
        <button className="px-4 py-1 bg-black text-white rounded" type="submit">
          Send
        </button>
      </form>
    </div>
  )
}

----------------------------------------

TITLE: Performing Resumable Query with Vector in Upstash Vector Database
DESCRIPTION: This example demonstrates how to use the resumableQuery method with a direct vector input. It shows initializing the query with parameters, processing the results, fetching additional results, and properly stopping the query to release resources.

LANGUAGE: typescript
CODE:
const { result, fetchNext, stop } = await index.resumableQuery({
  maxIdle: 3600,
  topK: 50,
  vector: [0, 1, 2, ..., 383], // 384-dimensional vector
  includeMetadata: true,
  includeVectors: true,
});

console.log(result);
/*
[
  {
    id: '6345',
    score: 1.00000012,
    vector: [0, 1, 2, ..., 383],
    metadata: {
      sentence: "Upstash is great."
    }
  },
  // ... more results
]
*/

const nextBatch = await fetchNext(5); // Fetch next 5 results
console.log(nextBatch);

await stop(); // Stop the resumable query

----------------------------------------

TITLE: Querying Upstash Vector Index in JavaScript
DESCRIPTION: This snippet demonstrates how to use the Upstash Vector JavaScript SDK to create an index and perform dense and sparse queries. It initializes the index with REST URL and token, then executes separate queries for dense and sparse modes.

LANGUAGE: javascript
CODE:
import { Index, QueryMode } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

const denseResults = await index.query({
  data: "Upstash Vector",
  queryMode: QueryMode.DENSE,
})

const sparseResults = await index.query({
  data: "Upstash Vector",
  queryMode: QueryMode.SPARSE,
})

// Rerank dense and sparse results as you like here

----------------------------------------

TITLE: Creating and Embedding Sample Documents in Upstash Vector
DESCRIPTION: Code snippet that creates sample text documents, embeds them using the Hugging Face model, and stores them in Upstash Vector with batch processing parameters for optimization.

LANGUAGE: python
CODE:
# Sample documents to embed and store
documents = [
    Document(page_content="Global warming is causing sea levels to rise."),
    Document(page_content="AI is transforming many industries."),
    Document(page_content="Renewable energy is vital for sustainable development.")
]
vector_store.add_documents(documents=documents, batch_size=100, embedding_chunk_size=200)

----------------------------------------

TITLE: Upserting Vectors Using Vector Objects in Python
DESCRIPTION: This snippet demonstrates how to upsert vectors into an Upstash Vector index using Vector objects. It creates 100 random vectors with generated IDs, random vector values, metadata, and unstructured data.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index, Vector

index = Index.from_env()

dimension = 128  # Adjust based on your index's dimension
upsert_amount = 100

vectors = [
    Vector(
        id=f"generated-id-{i}",
        vector=[random.random() for _ in range(dimension)],
        metadata={"some_field": f"some_value-{i}"},
        data=f"some-unstructured-data-{i}",
    )
    for i in range(upsert_amount)
]

index.upsert(vectors=vectors)

----------------------------------------

TITLE: Performing Semantic Search with Upstash Vector Cache in JavaScript
DESCRIPTION: This code snippet shows how to perform a semantic search using the initialized semantic cache. It demonstrates searching for similar entries based on a query string and retrieving the results.

LANGUAGE: javascript
CODE:
const results = await cache.search("What is the capital of France?", {
  similarity: 0.8,
  limit: 5,
});

----------------------------------------

TITLE: Querying Upstash Vector Index in Go
DESCRIPTION: This Go code snippet shows how to use the Upstash Vector Go SDK to create an index and perform dense and sparse queries. It initializes the index with REST URL and token, then executes separate queries for dense and sparse modes using the QueryData method.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	denseScores, err := index.QueryData(vector.QueryData{
		Data:      "Upstash Vector",
		QueryMode: vector.QueryModeDense,
	})

	sparseScores, err := index.QueryData(vector.QueryData{
		Data:      "Upstash Vector",
		QueryMode: vector.QueryModeSparse,
	})

	// Rerank dense and sparse results as you like here
}

----------------------------------------

TITLE: Querying Vector Data with curl
DESCRIPTION: Basic curl command to query vector data using the Upstash Vector REST API. This example queries for nearest neighbors of "What is Upstash?" text, limiting results to top 2 matches and including metadata in the response.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "data": "What is Upstash?", "topK": 2, "includeMetadata": true }'

----------------------------------------

TITLE: Upserting Vectors Using Tuples in Python
DESCRIPTION: This snippet shows how to upsert vectors into an Upstash Vector index using tuples. Each tuple contains an ID, vector values, metadata, and unstructured data, representing 100 random vectors.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index

index = Index.from_env()

dimension = 128  # Adjust based on your index's dimension
upsert_amount = 100

vectors = [
    (
        f"generated-id-{i}",
        [random.random() for _ in range(dimension)],
        {"some_field": f"some_value-{i}"},
        f"some-unstructured-data-{i}",
    )
    for i in range(upsert_amount)
]

index.upsert(vectors=vectors)

----------------------------------------

TITLE: Performing Resumable Query with Data for Embedding Generation in Upstash Vector Database
DESCRIPTION: This example shows how to use the resumableQuery method with the data parameter, which uses Upstash Embedding to generate vectors from text. It demonstrates query initialization, result processing, and fetching additional results.

LANGUAGE: typescript
CODE:
const { result, fetchNext, stop } = await index.resumableQuery({
  maxIdle: 3600,
  topK: 50,
  data: "lord of the rings"
  includeMetadata: true,
  includeData: true,
});

console.log(result);
/*
[
  {
    id: '6345',
    score: 1.00000012,
    data: "hobbit",
    metadata: {
      sentence: "Upstash is great."
    }
  },
  // ... more results
]
*/

const nextBatch = await fetchNext(5); // Fetch next 5 results
console.log(nextBatch);

await stop(); // Stop the resumable query

----------------------------------------

TITLE: Performing Semantic Search
DESCRIPTION: Executing a similarity search query to find relevant documents.

LANGUAGE: python
CODE:
result = store.similarity_search("Technology's role in global warming.", k=5)
print(result)

----------------------------------------

TITLE: Querying Upstash Vector Index in PHP
DESCRIPTION: This PHP code snippet demonstrates how to use the Upstash Vector PHP SDK to create an index and perform dense and sparse queries. It initializes the index with REST URL and token, then executes separate queries for dense and sparse modes using the queryData method with DataQuery objects.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;
use Upstash\Vector\Enums\QueryMode;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$denseResults = $index->queryData(new DataQuery(
  data: 'Upstash Vector',
  topK: 3,
  queryMode: QueryMode::DENSE,
));

$sparseResults = $index->queryData(new DataQuery(
  data: 'Upstash Vector',
  topK: 3,
  queryMode: QueryMode::SPARSE,
));

// Rerank dense and sparse results as you like here

----------------------------------------

TITLE: Querying Upstash Vector Index with Data Input and Filtering
DESCRIPTION: This example shows how to query an Upstash Vector index using a data input instead of a vector. It includes options for filtering results based on metadata, and retrieving vectors and metadata in the response.

LANGUAGE: typescript
CODE:
const results = await index.query({
  data: "Movie about an adventure of a hobbit in a fantasy world.",
  includeVectors: true,
  includeMetadata: true,
  topK: 1,
  filter: "genre = 'fantasy' and title = 'Lord of the Rings'",
});
/*
[
  {
    id: "1234",
    vector: [0.1, 0.2, 0.3, 0.4, 0.5],
    score: 0.9999999,
    metadata: {
      title: "Lord of The Rings",
      genre: "fantasy",
      category: "classic",
    },
  }
]
*/

----------------------------------------

TITLE: Starting a Resumable Query and Fetching Results in Python
DESCRIPTION: This snippet shows how to start a resumable query and fetch initial results. It also demonstrates how to fetch additional results and stop the query when finished.

LANGUAGE: python
CODE:
initial_results = query.start()

next_results = query.fetch_next(number_of_results)

stop_result = query.stop()
assert stop_result == 'Success'

----------------------------------------

TITLE: Upserting Text Data in JavaScript
DESCRIPTION: Demonstration of upserting text data into an Upstash Vector index with hosted embedding models using JavaScript. This approach simplifies data insertion by handling embedding internally.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([
  {
    id: 'id-0',
    data: "Upstash Vector provides dense and sparse embedding models.",
  }
])

----------------------------------------

TITLE: Querying Upstash Vector Index using curl
DESCRIPTION: This curl command snippet shows how to directly query the Upstash Vector REST API for both dense and sparse queries. It demonstrates sending POST requests to the query-data endpoint with different query modes, using environment variables for the REST URL and token.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"data": "Upstash Vector", "queryMode": "DENSE"}'

curl $UPSTASH_VECTOR_REST_URL/query-data \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"data": "Upstash Vector", "queryMode": "SPARSE"}'

----------------------------------------

TITLE: Querying with Embedding Models and Namespaces in PHP using Upstash Vector SDK
DESCRIPTION: This snippet shows how to query an index configured with an embedding model from a specific namespace using the PHP SDK. It demonstrates the use of the namespace() method before calling queryData().

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->namespace('my-namespace')->queryData(new DataQuery(
  data: 'What is the capital of France?',
  topK: 1, // to only return 1 result.
  includeData: true,
));

----------------------------------------

TITLE: Querying Text Data with Embedding Model in Python
DESCRIPTION: This snippet demonstrates how to query an Upstash Vector index using raw text and a pre-selected embedding model in Python. It initializes the index and performs a query with specified parameters.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    data="What is Upstash?",
    top_k=1,
    include_metadata=True,
)

----------------------------------------

TITLE: Upserting Multiple Data Entries in TypeScript
DESCRIPTION: Shows how to upsert multiple data entries that will be converted to vectors. Includes multiple text entries with different IDs and metadata.

LANGUAGE: typescript
CODE:
await index.upsert([
  {
    id: "6789",
    data: "'Harry Potter' follows the journey of a young wizard, Harry Potter, as he attends Hogwarts School of Witchcraft and Wizardry, forms deep friendships, and confronts the dark wizard Voldemort, who seeks immortality and domination over the magical world.",
  },
  {
    id: "1234",
    data: "'The Lord of the Rings' follows Frodo Baggins and his allies on a quest to destroy a powerful ring and save Middle-earth from the dark lord Sauron.",
    metadata: {
      title: "Lord of The Rings",
      genre: "drama",
      category: "classic",
    },
  },
]);

----------------------------------------

TITLE: Querying with Dense and Sparse Vectors in Go
DESCRIPTION: Example of querying an Upstash Vector hybrid index using dense and sparse vectors in Go. This method provides precise control over the query vectors.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	scores, err := index.Query(vector.Query{
		Vector: []float32{0.5, 0.4},
		SparseVector: &vector.SparseVector{
			Indices: []int32{3, 5},
			Values:  []float32{0.3, 05},
		},
		TopK:            5,
		IncludeMetadata: true,
	})
}

----------------------------------------

TITLE: Upserting Multiple Vectors Using cURL
DESCRIPTION: Example of using cURL to upsert multiple vectors with metadata into the default namespace. The request includes vector IDs, raw text data for embedding, and optional metadata.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[ 
    { "id": "id-0", "data": "Upstash is a serverless data platform.", "metadata": { "link": "upstash.com" } }, 
    { "id": "id-1", "data": "Upstash Vector is a serverless vector database." }
  ]'

----------------------------------------

TITLE: Querying with Embedding Models in PHP using Upstash Vector SDK
DESCRIPTION: This snippet demonstrates how to query an index configured with an embedding model using a simple string input. The SDK automatically converts the string into vector embeddings for querying.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->queryData(new DataQuery(
  data: 'What is the capital of France?',
  topK: 1, // to only return 1 result.
  includeData: true,
));

----------------------------------------

TITLE: Querying with Dense and Sparse Vectors in PHP
DESCRIPTION: Demonstration of querying an Upstash Vector hybrid index using dense and sparse vectors in PHP. This approach allows for direct control over query vector representations.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->query(new VectorQuery(
  vector: [0.5, 0.4],
  sparseVector: new SparseVector(
    indices: [3, 5],
    values: [0.3, 0.5],
  ),
  topK: 5,
  includeMetadata: true,
));

----------------------------------------

TITLE: Performing Text-Based Similarity Search
DESCRIPTION: Implementation of semantic search using text query to find similar documents.

LANGUAGE: python
CODE:
# Querying Vectors using a text query\nquery_text = "What are the effects of global warming?"\nquery_embedding = embeddings.embed_query(query_text)\n\n# Perform similarity search with the query text\nresult_text_query = vector_store.similarity_search(\n    query=query_text,\n    k=5  # Number of top results to return\n)\n\nprint("Results for text-based similarity search:")\nfor res in result_text_query:\n    print(res.page_content)

----------------------------------------

TITLE: Upserting Vectors with Metadata
DESCRIPTION: Examples of how to insert or update vectors with associated metadata across different programming languages. The metadata includes a URL that can be used for reference or filtering.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [("id-0", [0.9215, 0.3897]), {"url": "https://imgur.com/z9AVZLb"}],
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert({
  "id": "id-0",
  vector: [0.9215, 0.3897],
  metadata: {
    url: "https://imgur.com/z9AVZLb",
  },
})

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	index.Upsert(vector.Upsert{
		Id:       "id-0",
		Vector:   []float32{0.9215, 0.3897},
		Metadata: map[string]any{"url": "https://imgur.com/z9AVZLb"},
	})
}

----------------------------------------

TITLE: Upserting Vectors with Data in JavaScript
DESCRIPTION: This code shows how to upsert vectors with metadata and data in JavaScript using the Upstash Vector client. It demonstrates adding vectors with various combinations of vector values, metadata, and data fields.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([
  {
    id: "id-0",
    vector: [0.9215, 0.3897],
    metadata: {"url": "https://imgur.com/z9AVZLb"},
    data: "data-0",
  },
  {
    id: "id-1",
    vector: [0.3897, 0.9215],
    data: "data-1",
  },
])

----------------------------------------

TITLE: Querying with Dense and Sparse Vectors in JavaScript
DESCRIPTION: Demonstration of querying an Upstash Vector hybrid index using dense and sparse vectors in JavaScript. This approach offers direct control over query vector representations.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query({
  vector: [0.5, 0.4],
  sparseVector: {
    indices: [2, 3],
    values: [0.13, 0.87],
  },
  includeData: true,
  topK: 3,
})

----------------------------------------

TITLE: Querying Parsed Documents with LLM and Upstash Vector
DESCRIPTION: Implementation of document querying using UpstashVectorStore, OpenAI, and LlamaIndex query engine.

LANGUAGE: python
CODE:
from llama_index.core import VectorStoreIndex
from llama_index.vector_stores.upstash import UpstashVectorStore
from llama_index.core import StorageContext
import openai

# Load environment variables for API keys and Upstash configuration
from dotenv import load_dotenv
import os
load_dotenv()

# Set up OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Set up Upstash Vector Store
upstash_vector_store = UpstashVectorStore(
    url=os.getenv("UPSTASH_VECTOR_REST_URL"),
    token=os.getenv("UPSTASH_VECTOR_REST_TOKEN"),
)

# Create a storage context for Upstash Vector and index the parsed document
storage_context = StorageContext.from_defaults(vector_store=upstash_vector_store)
index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)

# Create a query engine for the index and perform a query
query_engine = index.as_query_engine()
query = "What are the main points discussed in the document?"
response = query_engine.query(query)
print(response)

----------------------------------------

TITLE: Upserting Single Vector in TypeScript
DESCRIPTION: Demonstrates how to upsert a single vector with metadata into the vector database. The vector includes numerical values and associated metadata like title, genre, and category.

LANGUAGE: typescript
CODE:
await index.upsert({
  id: "1234",
  vector: [0.1, 0.2, 0.3, 0.4, 0.5],
  metadata: {
    title: "Lord of The Rings",
    genre: "drama",
    category: "classic",
  },
});

----------------------------------------

TITLE: Custom Reranking with Text Data
DESCRIPTION: Example of implementing custom reranking using text data with Upstash-hosted embedding models

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import SparseVector, QueryMode

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

dense_results = index.query(
    data="Upstash Vector",
    query_mode=QueryMode.DENSE,
)

sparse_results = index.query(
    data="Upstash Vector",
    query_mode=QueryMode.SPARSE,
)

----------------------------------------

TITLE: Upserting Text Data in Python
DESCRIPTION: Example of upserting text data into an Upstash Vector index with hosted embedding models using Python. This method simplifies the process by handling embedding behind the scenes.

LANGUAGE: python
CODE:
from upstash_vector import Index, Vector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    vectors=[
        Vector(id="id-0", data="Upstash Vector provides dense and sparse embedding models."),
        Vector(id="id-1", data="You can upsert text data with these embedding models."),
    ]
)

----------------------------------------

TITLE: Querying Text Data with Embedding Model using cURL
DESCRIPTION: This snippet shows how to query an Upstash Vector index using raw text and a pre-selected embedding model via cURL. It sends a POST request to perform a query with specified parameters.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"data": "What is Upstash?", "topK": 1, "includeMetadata": "true"}'

----------------------------------------

TITLE: Querying Text Data with Embedding Model in JavaScript
DESCRIPTION: This snippet shows how to query an Upstash Vector index using raw text and a pre-selected embedding model in JavaScript. It initializes the index and performs a query with specified parameters.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query({
  data: "What is Upstash?",
  topK: 1,
  includeMetadata: true,
})

----------------------------------------

TITLE: Upserting Sparse Vectors in Python using Upstash Vector
DESCRIPTION: Shows how to upsert sparse vectors into Upstash Vector indexes using the Python SDK. It demonstrates creating an Index object and upserting multiple vectors with sparse representations.

LANGUAGE: python
CODE:
from upstash_vector import Index, Vector
from upstash_vector.types import SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    vectors=[
        Vector(id="id-0", sparse_vector=SparseVector([1, 2], [0.1, 0.2])),
        Vector(id="id-1", sparse_vector=SparseVector([123, 44232], [0.5, 0.4])),
    ]
)

----------------------------------------

TITLE: Querying Vectors with Similarity Search in Upstash Vector using Python
DESCRIPTION: This snippet demonstrates how to retrieve vectors from an Upstash Vector index based on similarity comparison. It shows how to generate a random query vector, execute a similarity search, and process the results including filtering by metadata.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index

index = Index.from_env()

# Generate a random vector for similarity comparison
dimension = 128  # Adjust based on your index's dimension
query_vector = [random.random() for _ in range(dimension)]

# Execute the query
query_result = index.query(
    vector=query_vector,
    include_metadata=True,
    include_data=True,
    include_vectors=False,
    top_k=5,
    filter="genre = 'fantasy' and title = 'Lord of the Rings'",
)

# Print the query result
for result in query_result:
    print("Score:", result.score)
    print("ID:", result.id)
    print("Vector:", result.vector)
    print("Metadata:", result.metadata)
    print("Data:", result.data)

----------------------------------------

TITLE: Specifying a Namespace for Vector Upsert Operations in Python
DESCRIPTION: This snippet shows how to specify a custom namespace when upserting vectors. When no namespace is provided, the default namespace is used.

LANGUAGE: python
CODE:
index.upsert(..., namespace="ns")

----------------------------------------

TITLE: Weighting Query Values with IDF in Upstash
DESCRIPTION: Shows how to use inverse document frequency (IDF) weighting in queries, particularly useful for BM25-like algorithms. IDF helps in making rare term matches more significant in the search results.

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import WeightingStrategy

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    data="Upstash Vector",
    top_k=5,
    weighting_strategy=WeightingStrategy.IDF,
)

LANGUAGE: javascript
CODE:
import { Index, WeightingStrategy } from "@upstash/vector";

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
});

await index.query({
  sparseVector: {
    indices: [2, 3],
    values: [0.13, 0.87],
  },
  weightingStrategy: WeightingStrategy.IDF,
  topK: 3,
});

----------------------------------------

TITLE: Vector Query with Filtering in Python
DESCRIPTION: Python implementation of vector similarity search with metadata filtering using the Upstash Vector client.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
  url="UPSTASH_VECTOR_REST_URL",
  token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
  vector=[0.9215, 0.3897],
  filter="population >= 1000000 AND geography.continent = 'Asia'",
  top_k=5,
  include_metadata=True
)

----------------------------------------

TITLE: Creating a Resumable Query in Python for Upstash Vector Database
DESCRIPTION: This snippet demonstrates how to create a resumable query using the Index class. It includes various parameters such as vector, top_k, include_metadata, include_vectors, and namespace.

LANGUAGE: python
CODE:
query = index.resumable_query(
    vector=[0.1, 0.2],  # or use 'data' parameter for text-based queries
    top_k=2,
    include_metadata=True,
    include_vectors=True,
    namespace="your_namespace"
)

----------------------------------------

TITLE: Querying Sparse Vectors in Upstash
DESCRIPTION: Shows how to query sparse vectors using dimension indices and values arrays. The query calculates similarity scores using inner product similarity metric.

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    sparse_vector=SparseVector([3, 5], [0.3, 0.5]),
    top_k=5,
    include_metadata=True,
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query(
  {
    sparseVector: {
      indices: [2, 3],
      values: [0.13, 0.87],
    },
    includeData: true,
    topK: 3,
  },
)

----------------------------------------

TITLE: Initializing Semantic Cache with Upstash Vector in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize a semantic cache using Upstash Vector in JavaScript. It creates a new SemanticCache instance with specified parameters for the vector database and embedding model.

LANGUAGE: javascript
CODE:
import { SemanticCache } from "@upstash/semantic-cache";

const cache = new SemanticCache({
  vector: {
    url: process.env.UPSTASH_VECTOR_REST_URL,
    token: process.env.UPSTASH_VECTOR_REST_TOKEN,
    index: "my-index",
  },
  embeddingModel: "text-embedding-ada-002",
  openaiApiKey: process.env.OPENAI_API_KEY,
});

----------------------------------------

TITLE: Vector Query with Filtering in Go
DESCRIPTION: Go implementation of vector similarity search with metadata filtering using the Upstash Vector client.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	index.Query(vector.Query{
		Vector:          []float32{0.9215, 0.3897},
		Filter:          `population >= 1000000 AND geography.continent = 'Asia'`,
		TopK:            5,
		IncludeMetadata: true,
	})
}

----------------------------------------

TITLE: Querying Vectors with Data in Python
DESCRIPTION: This code demonstrates how to query vectors with data included in Python. It shows how to perform semantic search using text data and retrieve vector results with their associated data fields.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

result = index.query(
    data="What is Upstash?",
    include_data=True,
)

for res in result:
    print(f"{res.id}: {res.data}")

----------------------------------------

TITLE: Querying Text Data with Embedding Model in Go
DESCRIPTION: This snippet illustrates how to query an Upstash Vector index using raw text and a pre-selected embedding model in Go. It initializes the index and performs a query with specified parameters.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	index.QueryData(vector.QueryData{
		Data:            "What is Upstash?",
		TopK:            1,
		IncludeMetadata: true,
	})
}

----------------------------------------

TITLE: Upserting a Single Vector with Namespace in Upstash Vector Database using PHP
DESCRIPTION: This code shows how to upsert a single vector into a specific namespace within an Upstash Vector index. It creates a random vector with 1536 dimensions and assigns it an ID of '1' within the 'my-namespace' namespace.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsert(new VectorUpsert(
  id: '1',
  vector: createRandomVector(dimensions: 1536)
));

----------------------------------------

TITLE: Server Action for Resource Creation
DESCRIPTION: Implementation of a server action to create new resources and upsert them to the vector index with input validation using Zod.

LANGUAGE: typescript
CODE:
'use server'

import { z } from 'zod'
import { upsertEmbeddings } from '@/lib/ai/upstashVector'

const NewResourceSchema = z.object({
  content: z.string().min(1),
})

export async function createResource(input: { content: string }) {
  const { content } = NewResourceSchema.parse(input)

  const resourceId = crypto.randomUUID()

  await upsertEmbeddings(resourceId, content)

  return `Resource ${resourceId} created and embedded.`
}

----------------------------------------

TITLE: Vector Query with Filtering in PHP
DESCRIPTION: PHP implementation of vector similarity search with metadata filtering using the Upstash Vector client.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->query(new VectorQuery(
  vector: [0.9215, 0.3897],
  topK: 5,
  includeMetadata: true,
  filter: "population >= 1000000 AND geography.continent = 'Asia'",
));

----------------------------------------

TITLE: Querying Vectors with Data in JavaScript
DESCRIPTION: This code shows how to query vectors with data included in JavaScript. It demonstrates semantic search using text and retrieves results with data fields, limiting the results to the top 3 matches.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

const result = await index.query({
  data: "What is Upstash?",
  includeData: true,
  topK: 3
})

for (const vector of result) {
  console.log(`${vector.id}: ${vector.data}`)
}

----------------------------------------

TITLE: Specifying a Namespace for Vector Queries in Upstash
DESCRIPTION: This snippet shows how to specify a namespace when querying vectors. When no namespace is provided, the default namespace will be used.

LANGUAGE: python
CODE:
index.query(..., namespace="ns")

----------------------------------------

TITLE: Successful Vector Query Response
DESCRIPTION: Example of a successful response from the Upstash Vector query API. This JSON response shows two results with similarity scores and metadata where available. The first result is a perfect match with score 1.0.

LANGUAGE: json
CODE:
{
    "result": [
        {
            "id": "id-0",
            "score": 1.0,
            "metadata": {
                "link": "upstash.com"
            }
        },
        {
            "id": "id-1",
            "score": 0.99996454
        }
    ]
}

----------------------------------------

TITLE: Querying with Metadata Filtering and Namespaces in PHP using Upstash Vector SDK
DESCRIPTION: This snippet demonstrates how to query vectors with metadata filtering from a specific namespace in Upstash Vector using the PHP SDK. It shows the use of the namespace() method before applying metadata filtering.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->namespace('my-namespace')->query(new VectorQuery(
  vector: [0.1, 0.2, ...],
  topK: 15,
  filter: "country = 'PT' AND continent = 'EU'"
));

----------------------------------------

TITLE: Upserting a Single Vector in Upstash Vector Database using PHP
DESCRIPTION: This code demonstrates how to upsert a single vector into an Upstash Vector index using the PHP SDK. It creates a random vector with 1536 dimensions and assigns it an ID of '1'.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsert(new VectorUpsert(
  id: '1',
  vector: createRandomVector(dimensions: 1536)
));

----------------------------------------

TITLE: Querying Vectors with Data in PHP
DESCRIPTION: This code demonstrates how to query vectors with data included in PHP. It shows how to use the DataQuery class to perform semantic search and retrieve results with their associated data fields, limiting to the top 3 matches.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$results = $index->queryData(new DataQuery(
  data: 'Upstash is a serverless data platform.',
  topK: 3
  includeData: true,
));

foreach ($results as $result) {
  print_r($result->toArray());
}

----------------------------------------

TITLE: Performing a Resumable Query with Text Data using cURL
DESCRIPTION: This example demonstrates how to use cURL to initiate a resumable vector query with text data. The request includes the text data to be embedded, specifies to return 2 results, includes metadata in the response, and sets a maximum idle time of 3600 seconds (1 hour) for the resumable query.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "data": "Hello world",
    "topK": 2,
    "includeMetadata": true,
    "maxIdle": 3600
  }'

----------------------------------------

TITLE: Querying Hybrid Vectors with Namespaces in PHP using Upstash Vector SDK
DESCRIPTION: This snippet illustrates how to query hybrid vectors from a specific namespace in Upstash Vector using the PHP SDK. It shows the use of the namespace() method before querying hybrid vectors.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->namespace('my-namespace')->query(new VectorQuery(
  vector: [0.1, 0.2, ...],
  sparseVector: new SparseVector(
    indices: [1, 2, 3],
    values: [5.0, 6.0, 7.0],
  ),
  topK: 15,
));

----------------------------------------

TITLE: Parsing Documents with LlamaParse
DESCRIPTION: Python code to initialize LlamaParse parser and process documents using SimpleDirectoryReader.

LANGUAGE: python
CODE:
from llama_parse import LlamaParse
from llama_index.core import SimpleDirectoryReader

# Initialize the LlamaParse parser with the desired result format
parser = LlamaParse(result_type="markdown")  # "markdown" and "text" are available

# Parse the document using the parser
file_extractor = {".txt": parser}
documents = SimpleDirectoryReader(input_files=["./documents/global_warming.txt"], file_extractor=file_extractor).load_data()

----------------------------------------

TITLE: Starting a Resumable Query in Python
DESCRIPTION: Initiates a resumable vector query using the Upstash Vector Python SDK. This code connects to the vector database, performs an initial query for the top 2 most similar vectors to the given vector, and includes metadata in the results.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

result, handle = index.resumable_query(
    vector=[0.1, 0.2],
    top_k=2,
    include_metadata=True,
)

# first batch of the results
for r in result:
    print(r)

----------------------------------------

TITLE: Querying with Text Data in Python
DESCRIPTION: Example of querying an Upstash Vector hybrid index using text data in Python. This method simplifies querying by handling embedding internally.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    data="Upstash Vector",
    top_k=5,
)

----------------------------------------

TITLE: Upserting Text Data in Go
DESCRIPTION: Example of upserting text data into an Upstash Vector index with hosted embedding models using Go. This method simplifies data insertion by handling embedding internally.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	err := index.UpsertData(vector.UpsertData{
		Id:   "id-0",
		Data: "Upstash Vector provides dense and sparse embedding models.",
	})
}

----------------------------------------

TITLE: Upserting Dense and Sparse Vectors in JavaScript
DESCRIPTION: Demonstration of upserting dense and sparse vectors into an Upstash Vector index using JavaScript. This method provides direct control over vector representations.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([{
  id: 'id-0',
  vector: [0.1, 0.5],
  sparseVector: {
    indices: [2, 3],
    values: [0.13, 0.87],
  },
}])

----------------------------------------

TITLE: Initializing Upstash Vector Store
DESCRIPTION: Loading environment variables and creating a vector store instance with automatic embeddings generation.

LANGUAGE: python
CODE:
from dotenv import load_dotenv
from langchain_community.vectorstores.upstash import UpstashVectorStore

load_dotenv()

# Create a vector store instance where embeddings are generated by Upstash
store = UpstashVectorStore(embedding=True)

----------------------------------------

TITLE: Starting a Resumable Query in JavaScript
DESCRIPTION: Creates a resumable vector query using the Upstash Vector JavaScript SDK. This initializes a query that returns the top 2 most similar vectors to the input vector and includes vector metadata in the response.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
});

const { result, fetchNext, stop } = await index.resumableQuery({
  vector: [0.1, 0.2],
  topK: 2,
  includeMetadata: true,
});

// first batch of the results
for (let r of result) {
  console.log(r);
}

----------------------------------------

TITLE: Querying with Text Data in JavaScript
DESCRIPTION: Demonstration of querying an Upstash Vector hybrid index using text data in JavaScript. This approach simplifies querying by handling embedding internally.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query(
  {
    data: "Upstash Vector",
    topK: 1,
  },
)

----------------------------------------

TITLE: Retrieving Vector Index Information in TypeScript
DESCRIPTION: Example showing how to fetch comprehensive statistics about a vector index including total vector count, pending vectors, index size, dimensionality, similarity function, and namespace-specific information. The response includes details about vectors in both default and custom namespaces.

LANGUAGE: typescript
CODE:
const infoResponse = await index.info();
/*
{ 
  vectorCount: 17,
  pendingVectorCount: 0,
  indexSize: 551158,
  dimension: 1536,
  similarityFunction: "COSINE",
  namespaces: {
    "": { // default namespace
      vectorCount: 10,
      pendingVectorCount: 0,
    },
    "my-namespace": {
      vectorCount: 7,
      pendingVectorCount: 0,
    }
  }
}
*/

----------------------------------------

TITLE: Optional Vector Store Configuration
DESCRIPTION: Additional configuration options for namespace specification and custom embeddings.

LANGUAGE: python
CODE:
store = UpstashVectorStore(embedding=True, namespace="my_namespace")

from langchain_openai import OpenAIEmbeddings
store = UpstashVectorStore(embedding=OpenAIEmbeddings())

----------------------------------------

TITLE: Starting a Resumable Query in Go
DESCRIPTION: Implements a resumable vector query using the Upstash Vector Go SDK. The code initializes a connection to the vector database and performs a query for the top 2 most similar vectors with metadata included.

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"log"

	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	scores, handle, err := index.ResumableQuery(vector.ResumableQuery{
		Vector:          []float32{0.1, 0.2},
		TopK:            2,
		IncludeMetadata: true,
	})
	if err != nil {
		log.Fatal(err)
	}

	defer handle.Close()

	// first batch of the results
	for _, score := range scores {
		fmt.Printf("%+v\n", score)
	}
}

----------------------------------------

TITLE: Querying with Text Data in Go
DESCRIPTION: Example of querying an Upstash Vector hybrid index using text data in Go. This method simplifies querying by handling embedding internally.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	scores, err := index.QueryData(vector.QueryData{
		Data: "Upstash Vector",
		TopK: 5,
	})
}

----------------------------------------

TITLE: Querying Vector Index Statistics using Python
DESCRIPTION: Example demonstrating how to retrieve and display statistical information about a vector index using the info method. Shows how to access vector counts, index size, dimensions, similarity function, and namespace-specific statistics.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

from upstash_vector import Index

index = Index.from_env()

# Get statistical information about the index
info_result = index.info()

# Display the info result
print("Vector Count:", info_result.vector_count)
print("Pending Vector Count:", info_result.pending_vector_count)
print("Index Size:", info_result.index_size)
print("Dimension:", info_result.dimension)
print("Similarity Function:", info_result.similarity_function)

for ns, ns_info in info_result.namespaces.items():
    print("Namespace:", ns, "Vector Count:", ns_info.vector_count)
    print("Namespace:", ns, "Pending Vector Count:", ns_info.pending_vector_count)

----------------------------------------

TITLE: Accessing Namespace Metadata Properties in PHP
DESCRIPTION: Shows how to access properties of the NamespaceInfo object to retrieve metadata such as vector counts and pending vectors within a specific namespace.

LANGUAGE: php
CODE:
// To know the number of vectors ready to query.
$myNamespaceInfo->vectorCount;

// To know the number of vectors that are getting indexed.
$myNamespaceInfo->pendingVectorCount;

----------------------------------------

TITLE: Upserting Dense and Sparse Vectors using cURL
DESCRIPTION: Example of upserting dense and sparse vectors into an Upstash Vector index using cURL. This method provides a low-level approach for direct API interaction.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[
    {"id": "id-0", "vector": [0.1, 0.5], "sparseVector": {"indices": [1, 2], "values": [0.1, 0.2]}},
    {"id": "id-1", "vector": [0.3, 0.7], "sparseVector": {"indices": [123, 44232], "values": [0.5, 0.4]}}
  ]'

----------------------------------------

TITLE: Querying Dense Vectors in PHP using Upstash Vector SDK
DESCRIPTION: This snippet demonstrates how to query dense vectors from Upstash Vector using the PHP SDK. It shows the usage of the query() method with various parameters like topK, includeMetadata, includeVectors, includeData, and filter.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->query(new VectorQuery(
  vector: [0.1, 0.2, ...], // "..." represents the dimension size of your vector index.
  topK: 15, // topK is the limit number of records we want to be returned.
  includeMetadata: true, // (optional) if true the query results will contain metadata.
  includeVectors: true, // (optional) if true the query results will contain the indexed vectors.
  includeData: true, // (optional) if true the query results will contain the string data.
  filter: '', // (optional) if set, the query results will be filtered by the given filter.
));

----------------------------------------

TITLE: Upserting Vectors with Data using curl
DESCRIPTION: This code shows how to upsert vectors with metadata and data using curl commands with the Upstash Vector REST API. It demonstrates the JSON structure required for the API request.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[
        {
            "id": "id-0",
            "vector": [0.9215, 0.3897],
            "metadata": {"url": "https://imgur.com/z9AVZLb"},
            "data": "data-0"
        },
        {
            "id": "id-1",
            "vector": [0.3897, 0.9215],
            "data": "data-1"
        }
    ]'

----------------------------------------

TITLE: Retrieving Namespace Information with PHP
DESCRIPTION: Demonstrates how to fetch information about vector namespaces using the getNamespaceInfo() method. Shows both how to get info about the default namespace and a specific named namespace.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

// Fetch the information of the default namespace.
$defaultNamespaceInfo = $index->getNamespaceInfo();

// Fetch the information on a specific namespace.
$myNamespaceInfo = $index->namespace('my-namespace')->getNamespaceInfo();

----------------------------------------

TITLE: Performing Vector-Based Similarity Search
DESCRIPTION: Implementation of similarity search using direct vector query instead of text.

LANGUAGE: python
CODE:
# Querying Vectors using a vector directly\nresult_vector_query = vector_store.similarity_search_by_vector(\n    embedding=query_embedding,\n    k=5\n)\n\nprint("Results for vector-based similarity search:")\nfor res in result_vector_query:\n    print(res.page_content)

----------------------------------------

TITLE: Fetching Multiple Vectors with Python in Upstash Vector
DESCRIPTION: Demonstrates how to fetch multiple vectors from an Upstash Vector index using a list of IDs. Shows how to include vector data, metadata, and other properties in the fetch results.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

# Specify the identifiers of vectors to be fetched
ids_to_fetch = ["id-1", "id-2", "id-3"]

# Fetch the specified vectors with vectors and metadata included
fetch_result = index.fetch(
    ids=ids_to_fetch,
    include_vectors=True,
    include_metadata=True,
    include_data=True,
)

# Display the fetched vectors
for vector_info in fetch_result:
    print("ID:", vector_info.id)
    print("Vector:", vector_info.vector)
    print("Metadata:", vector_info.metadata)
    print("Data:", vector_info.data)

----------------------------------------

TITLE: Querying Sparse Vectors in PHP using Upstash Vector SDK
DESCRIPTION: This snippet illustrates how to query sparse vectors from Upstash Vector using the PHP SDK. It shows the usage of the SparseVector class to represent sparse vectors in the query.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->query(new VectorQuery(
  sparseVector: new SparseVector(
    indices: [1, 2, 3],
    values: [5.0, 6.0, 7.0],
  ),
  topK: 15,
));

----------------------------------------

TITLE: Querying Vectors using cURL in Upstash Vector Database
DESCRIPTION: This snippet demonstrates how to query vectors using cURL. It includes the basic query, querying with a namespace, and batch querying. The request includes parameters for the vector, topK results, and metadata inclusion.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "vector": [0.1, 0.2], "topK": 2, "includeMetadata": true }'

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/query/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "vector": [0.1, 0.2], "topK": 2, "includeMetadata": true }'

LANGUAGE: sh
CODE:
curl "$UPSTASH_VECTOR_REST_URL/query" \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[
        {
          "vector": [0.1, 0.2],
          "topK": 2,
          "includeMetadata": true
        },
        {
          "vector": [0.2, 0.3],
          "topK": 3
        }
      ]'

----------------------------------------

TITLE: Patching Vector Metadata Using JSON Merge Patch
DESCRIPTION: Shows how to partially update metadata using the JSON Merge Patch algorithm, allowing for updating existing fields, deleting fields (by setting to None), and adding new fields.

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import MetadataUpdateMode

index = Index.from_env()

updated = index.update(
    id="id2",
    metadata={
        "existing-field": "new-value",
        "existing-field-to-delete": None,
        "new-field": "new-value",
    },
    metadata_update_mode=MetadataUpdateMode.PATCH,
)

print(updated)

----------------------------------------

TITLE: Updating Vector Record with New Metadata and Data
DESCRIPTION: Demonstrates how to perform a complete update of a vector record by updating both metadata and data fields using the Upstash Vector Index class.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

updated = index.update(
    id="id1",
    metadata={"new": "metadata"},
    data="new-data",
)

print(updated)

----------------------------------------

TITLE: Updating Data Entry Metadata in TypeScript
DESCRIPTION: Demonstrates how to update metadata for a data entry. Shows both initial data upsert and subsequent metadata update.

LANGUAGE: typescript
CODE:
await index.upsert({
	id: "1234",
	data: "Upstash product"
	metadata: {
		title: "Redis"
	}
})

await index.upsert({
	id: "1234",
	metadata: {
		title: "QStash"
	}
})

----------------------------------------

TITLE: Querying Hybrid Vectors in PHP using Upstash Vector SDK
DESCRIPTION: This snippet shows how to query hybrid vectors (combination of dense and sparse vectors) from Upstash Vector using the PHP SDK. It demonstrates passing both vector and sparseVector parameters in the query.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->query(new VectorQuery(
  vector: [0.1, 0.2, ...],
  sparseVector: new SparseVector(
    indices: [1, 2, 3],
    values: [5.0, 6.0, 7.0],
  ),
  topK: 15,
));

----------------------------------------

TITLE: Deleting Vectors by ID Array in TypeScript
DESCRIPTION: Demonstrates how to delete multiple vectors by providing an array of vector IDs. Returns the number of successfully deleted vectors.

LANGUAGE: typescript
CODE:
const response = await index.delete(["2", "3"]);
// { deleted: 2 }

----------------------------------------

TITLE: Deleting Vectors by Prefix in TypeScript
DESCRIPTION: Demonstrates how to delete vectors by matching a prefix string against vector IDs. All vectors with IDs starting with the specified prefix will be deleted.

LANGUAGE: typescript
CODE:
const response = await index.delete({
  prefix: "article_",
});
// { deleted: 3 }

----------------------------------------

TITLE: Deleting Vectors by ID Prefix in Upstash Vector Index using Python
DESCRIPTION: This code example demonstrates how to delete vectors from an Upstash Vector Index based on an ID prefix. It will remove all vectors whose IDs start with the specified prefix.

LANGUAGE: python
CODE:
index.delete(prefix="id-")

----------------------------------------

TITLE: Updating Records
DESCRIPTION: Example of updating a record's vector or metadata using the upsert operation.

LANGUAGE: typescript
CODE:
await index.upsert({
  id: "18593",
  metadata: { genre: "romance" },
});

----------------------------------------

TITLE: Querying Upstash Vector Index with Vector Input
DESCRIPTION: This snippet demonstrates how to query an Upstash Vector index using a vector input. It includes options for specifying the number of results, including metadata and vectors, and using a custom namespace.

LANGUAGE: typescript
CODE:
await index.query({
  topK: 2,
  vector: [ ... ],
  includeMetadata: true,
  includeVectors: true
}, { namespace: "my-namespace" })
/*
[
  {
    id: '6345',
    score: 0.85,
    vector: [],
    metadata: {
      sentence: "Upstash is great."
    }
  },
  {
    id: '1233',
    score: 0.75,
    vector: [],
    metadata: undefined
  },
]
*/

----------------------------------------

TITLE: Upserting Single Vector to Namespace Using cURL
DESCRIPTION: Example of using cURL to upsert a single vector into a specific namespace. Shows how to include vector ID, data, and metadata in the request.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "id": "id-2", "data": "Upstash is a serverless data platform.", "metadata": { "link": "upstash.com" } }'

----------------------------------------

TITLE: Deleting Multiple Vectors by IDs in Upstash Vector Index using Python
DESCRIPTION: This snippet demonstrates how to delete multiple vectors from an Upstash Vector Index using their specific IDs. It initializes the index, specifies the vector IDs to delete, executes the deletion, and prints the number of deleted vectors.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

# Specify the identifiers of vectors to be deleted
ids_to_delete = ["id1", "id2", "id3"]

# Delete the specified vectors
delete_result = index.delete(ids=ids_to_delete)

# Display the number of vectors deleted
print("Number of Vectors Deleted:", delete_result.deleted)

----------------------------------------

TITLE: Fetching Vectors by ID Prefix with Namespace in PHP using Upstash Vector
DESCRIPTION: This snippet shows how to fetch vectors by ID prefix from a specific namespace in Upstash Vector. It combines the namespace() method with VectorFetchByPrefix to retrieve vectors from a particular namespace matching the given prefix.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorFetchByPrefix;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->namespace('my-namespace')->fetch(new VectorFetchByPrefix(
  prefix: 'users:',
  includeMetadata: true, // (optional) if true the fetch results will contain metadata.
  includeVectors: true, // (optional) if true the fetch results will contain the indexed vectors.
  includeData: true, // (optional) if true the fetch results will contain the string data.
));

----------------------------------------

TITLE: Starting a Resumable Query with curl
DESCRIPTION: Demonstrates how to initiate a resumable query directly using the REST API with curl. This sends a POST request to start a search for the top 2 most similar vectors to the provided vector, including metadata in the results.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "vector": [0.1, 0.2],
    "topK": 2,
    "includeMetadata": true
  }'

----------------------------------------

TITLE: Querying with Dense and Sparse Vectors using cURL
DESCRIPTION: Example of querying an Upstash Vector hybrid index using dense and sparse vectors with cURL. This method provides a low-level approach for direct API interaction.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"vector": [0.5, 0.4], "sparseVector": {"indices": [3, 5], "values": [0.3, 0.5]}, "topK": 5, "includeMetadata": true}'

----------------------------------------

TITLE: Querying Vector Data in Specific Namespace with curl
DESCRIPTION: curl command to query vector data in a specific namespace using the Upstash Vector REST API. This example targets the 'ns' namespace when searching for nearest neighbors.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "data": "What is Upstash?", "topK": 2, "includeMetadata": true }'

----------------------------------------

TITLE: Fetching Vectors by ID Prefix in PHP using Upstash Vector
DESCRIPTION: This snippet demonstrates how to fetch vectors by ID prefix from Upstash Vector. It uses the VectorFetchByPrefix class to retrieve all vectors with IDs matching a specified prefix.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorFetchByPrefix;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->fetch(new VectorFetchByPrefix(
  prefix: 'users:',
  includeMetadata: true, // (optional) if true the fetch results will contain metadata.
  includeVectors: true, // (optional) if true the fetch results will contain the indexed vectors.
  includeData: true, // (optional) if true the fetch results will contain the string data.
));

----------------------------------------

TITLE: Fetching Vectors by ID Prefix in Upstash Vector
DESCRIPTION: Shows how to fetch all vectors whose IDs start with a specific prefix from the Upstash Vector index.

LANGUAGE: python
CODE:
index.fetch(prefix="id-")

----------------------------------------

TITLE: Making a Resumable Query Request with cURL
DESCRIPTION: Demonstrates how to make a POST request to resume a vector query using cURL. The request requires authorization via bearer token and accepts a query UUID and the number of additional results to fetch.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query-next \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "uuid": "550e8400-e29b-41d4-a716-446655440000",
    "additionalK": 2
  }'

----------------------------------------

TITLE: Querying with Text Data in PHP
DESCRIPTION: Demonstration of querying an Upstash Vector hybrid index using text data in PHP. This approach simplifies querying by handling embedding internally.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->queryData(new DataQuery(
  data: 'Upstash Vector',
  topK: 5,
  includeMetadata: true,
));

----------------------------------------

TITLE: Deleting Vectors Using Metadata Filter in Upstash Vector Index with Python
DESCRIPTION: This snippet shows how to delete vectors from an Upstash Vector Index based on a metadata filter. In this case, it deletes all vectors where the 'age' metadata field is greater than 30.

LANGUAGE: python
CODE:
index.delete(filter="age > 30")

----------------------------------------

TITLE: Fetching Vector with Namespace in Upstash Vector
DESCRIPTION: Demonstrates how to fetch a vector from a specific namespace in the Upstash Vector index.

LANGUAGE: python
CODE:
index.fetch("id-4", namespace="ns")

----------------------------------------

TITLE: Fetching Vectors by ID in TypeScript
DESCRIPTION: Demonstrates basic usage of the fetch command to retrieve vectors by their IDs.

LANGUAGE: typescript
CODE:
await index.fetch(["2", "3"]);
// [{ id: "2" }, { id: "3" }]

----------------------------------------

TITLE: Upserting Text Data using cURL
DESCRIPTION: Example of upserting text data into an Upstash Vector index with hosted embedding models using cURL. This method provides a low-level approach for direct API interaction.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[
    {"id": "id-0", "data": "Upstash Vector provides dense and sparse embedding models."},
    {"id": "id-1", "data": "You can upsert text data with these embedding models."}
  ]'

----------------------------------------

TITLE: Querying with Text Data using cURL
DESCRIPTION: Example of querying an Upstash Vector hybrid index using text data with cURL. This method provides a low-level approach for direct API interaction.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"data": "Upstash Vector", "topK": 5}'

----------------------------------------

TITLE: Vector Query with Filtering using cURL
DESCRIPTION: Direct REST API call for vector similarity search with metadata filtering using cURL.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
   "vector":[0.9215,0.3897],
   "topK" : 5,
   "filter": "population >= 1000000 AND geography.continent = \"Asia\"",
   "includeMetadata": true
}'

----------------------------------------

TITLE: Vector Query Response in JSON for Upstash Vector Database
DESCRIPTION: This snippet shows the JSON response structure for a vector query in Upstash Vector Database. It includes the result array with vector IDs, scores, and optional metadata.

LANGUAGE: json
CODE:
{
    "result": [
        {
            "id": "id-0",
            "score": 1.0,
            "metadata": {
                "link": "upstash.com"
            }
        },
        {
            "id": "id-1",
            "score": 0.99996454
        }
    ]
}

----------------------------------------

TITLE: Scanning the Entire Index with Range Method in Upstash Vector
DESCRIPTION: Example of scanning the entire index using pagination with the range method. This approach uses the next_cursor to iterate through all vectors in the database.

LANGUAGE: python
CODE:
res = index.range(cursor="", limit=5)
print(res.vectors)

while res.next_cursor != "":
    res = index.range(cursor=res.next_cursor, limit=10)
    print(res.vectors)

----------------------------------------

TITLE: Querying Vectors with Data using curl
DESCRIPTION: This code shows how to query vectors with data included using curl commands with the Upstash Vector REST API. It demonstrates how to use the query-data endpoint with the includeData parameter set to true.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
        "data": "What is Upstash?",
        "includeData": true,
      }'

----------------------------------------

TITLE: Querying with Metadata Filtering in PHP using Upstash Vector SDK
DESCRIPTION: This snippet illustrates how to query vectors with metadata filtering in Upstash Vector using the PHP SDK. It shows how to use the filter parameter to filter vectors based on their metadata values.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->query(new VectorQuery(
  vector: [0.1, 0.2, ...],
  topK: 15,
  filter: "country = 'PT' AND continent = 'EU'"
));

----------------------------------------

TITLE: Querying with Text Data in Upstash
DESCRIPTION: Demonstrates querying vectors using text data that gets embedded by Upstash's embedding models before performing the search.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    data="Upstash Vector",
    top_k=5,
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query(
  {
    data: "Upstash Vector",
    topK: 1,
  },
)

----------------------------------------

TITLE: Upserting Text Data in Upstash Vector
DESCRIPTION: Demonstrates how to upsert text data using Upstash-hosted sparse embedding models across different programming languages. The code shows initialization of the Index client and upserting vectors with text data.

LANGUAGE: python
CODE:
from upstash_vector import Index, Vector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    vectors=[
        Vector(id="id-0", data="Upstash Vector provides sparse embedding models."),
        Vector(id="id-1", data="You can upsert text data with these embedding models."),
    ]
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([
  {
    id: 'id-0',
    data: "Upstash Vector provides dense and sparse embedding models.",
  }
])

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	err := index.UpsertDataMany([]vector.UpsertData{
		{
			Id:   "id-0",
			Data: "Upstash Vector provides sparse embedding models.",
		},
		{
			Id:   "id-1",
			Data: "You can upsert text data with these embedding models.",
		},
	})
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsertDataMany([
  new DataUpsert(
    id: 'id-0',
    data: 'Upstash Vector provides sparse embedding models.',
  ),
  new DataUpsert(
    id: 'id-1',
    data: 'You can upsert text data with these embedding models.',
  ),
]);

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[
    {"id": "id-0", "data": "Upstash Vector provides sparse embedding models."},
    {"id": "id-1", "data": "You can upsert text data with these embedding models."}
  ]'

----------------------------------------

TITLE: Updating Vector Metadata using curl
DESCRIPTION: Example of updating vector metadata for a vector with ID 'id-1' using the curl command to the Upstash Vector REST API. This request updates only the metadata field with a link to upstash.com.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/update \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "id": "id-1", "metadata": { "link": "upstash.com" } }'

----------------------------------------

TITLE: Using Namespaces for Vector Operations
DESCRIPTION: Example showing how to perform upsert and query operations within a specific namespace. Uses vector coordinates [0.9215, 0.3897] and demonstrates namespace-specific operations.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [("id-0", [0.9215, 0.3897])],
    namespace="ns",
)

index.query(
    [0.9215, 0.3897],
    top_k=5,
    namespace="ns",
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

const namespace = index.namespace("ns")

await namespace.upsert({
  id: "id-0",
  vector: [0.9215, 0.3897],
})

await namespace.query({
  vector: [0.9215, 0.3897],
  topK: 5,
})

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	namespace := index.Namespace("ns")

	namespace.Upsert(vector.Upsert{
		Id:     "id-0",
		Vector: []float32{0.9215, 0.3897},
	})

	namespace.Query(vector.Query{
		Vector: []float32{0.9215, 0.3897},
		TopK:   5,
	})
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$namespace = $index->namespace('ns');

$namespace->upsert(new VectorUpsert(
  id: 'id-0',
  vector: [0.9215, 0.3897],
));

$namespace->query(new VectorQuery(
  vector: [0.9215, 0.3897],
  topK: 5,
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"id":"id-0", "vector":[0.9215,0.3897]}'

curl $UPSTASH_VECTOR_REST_URL/query/ns \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"vector":[0.9215,0.3897], "topK" : 5}'

----------------------------------------

TITLE: Using Resumable Query with Typed Metadata and Filtering in Upstash Vector Database
DESCRIPTION: This example demonstrates using resumableQuery with TypeScript generics for strongly-typed metadata access. It shows how to apply metadata filtering to narrow down query results and access typed metadata fields in the response without type casting.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string,
  genre: 'sci-fi' | 'fantasy' | 'horror' | 'action'
}

const { result, fetchNext, stop } = await index.resumableQuery<Metadata>({
  vector: [
    ... // query embedding
  ],
  includeMetadata: true,
  topK: 1,
  filter: "genre = 'fantasy' and title = 'Lord of the Rings'",
  maxIdle: 3600,
})

if (result[0].metadata) {
  // Since we passed the Metadata type parameter above,
  // we can interact with metadata fields without having to
  // do any typecasting.
  const { title, genre } = result[0].metadata;
  console.log(`The best match in fantasy was ${title}`)
}

await stop();

----------------------------------------

TITLE: Upserting Sparse Vectors using cURL and Upstash Vector REST API
DESCRIPTION: Shows how to upsert sparse vectors into Upstash Vector indexes using a direct cURL request to the REST API. It demonstrates upserting multiple vectors with sparse representations.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[
    {"id": "id-0", "sparseVector": {"indices": [1, 2], "values": [0.1, 0.2]}},
    {"id": "id-1", "sparseVector": {"indices": [123, 44232], "values": [0.5, 0.4]}}
  ]'

----------------------------------------

TITLE: Upserting Sparse Vectors in PHP using Upstash Vector
DESCRIPTION: Demonstrates how to upsert sparse vectors into Upstash Vector indexes using the PHP SDK. It shows the creation of an Index object and upserting multiple vectors with sparse representations.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsertMany([
  new VectorUpsert(
    id: 'id-0',
    sparseVector: new SparseVector(
      indices: [1, 2],
      values: [0.1, 0.2],
    ),
  ),
  new VectorUpsert(
    id: 'id-1',
    sparseVector: new SparseVector(
      indices: [123, 44232],
      values: [0.5, 0.4],
    ),
  ),
]);

----------------------------------------

TITLE: Listing Namespaces
DESCRIPTION: Examples showing how to retrieve a list of all active namespaces in the vector index using different programming languages.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.list_namespaces()

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.listNamespaces()

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	index.ListNamespaces()
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->listNamespaces();

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/list-namespaces \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Initializing Upstash Vector Index Client in Python
DESCRIPTION: Code snippet showing how to initialize the Index client using explicit URL and token credentials.

LANGUAGE: python
CODE:
from upstash_vector import Index
index = Index(url="UPSTASH_VECTOR_REST_URL", token="UPSTASH_VECTOR_REST_TOKEN")

----------------------------------------

TITLE: Upserting Sparse Vectors in Go using Upstash Vector
DESCRIPTION: Shows how to upsert sparse vectors into Upstash Vector indexes using the Go SDK. It demonstrates creating an Index object and upserting multiple vectors with sparse representations.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	err := index.UpsertMany([]vector.Upsert{
		{
			Id: "id-0",
			SparseVector: &vector.SparseVector{
				Indices: []int32{1, 2},
				Values:  []float32{0.1, 0.2},
			},
		},
		{
			Id: "id-1",
			SparseVector: &vector.SparseVector{
				Indices: []int32{123, 44232},
				Values:  []float32{0.5, 0.4},
			},
		},
	})
}

----------------------------------------

TITLE: Basic Vector Range Query with Upstash Vector Database in TypeScript
DESCRIPTION: A basic example of using the range method to retrieve vectors in chunks with pagination. This snippet demonstrates how to set the cursor, limit the number of results, and include metadata in the response. It also shows how to specify a namespace for the query.

LANGUAGE: typescript
CODE:
const responseRange = await index.range(
  {
    cursor: 0,
    limit: 2,
    includeMetadata: true,
  },
  { namespace: "my-namespace" }
);

/*
{
  nextCursor: '2',
  vectors: [
    { 
      id: '0',
      metadata: {
        keyword: "Vector"
      } 
    },
    { 
      id: '19',
      metadata: {
        keyword: "Redis"
      } 
    }
  ]
}
*/

----------------------------------------

TITLE: RRF Score Calculation Formula
DESCRIPTION: Formula used in Reciprocal Rank Fusion to map result scores based on their rank position

LANGUAGE: plaintext
CODE:
Mapped Score = 1 / (rank + K)

----------------------------------------

TITLE: Upserting Text Data with Embedding Model in JavaScript
DESCRIPTION: This snippet shows how to upsert raw text data into an Upstash Vector index using a pre-selected embedding model in JavaScript. It initializes the index and inserts a text entry with metadata.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert({
  id: "id-0",
  data: "Upstash is a serverless data platform.",
  metadata: {
    field: "value",
  },
})

----------------------------------------

TITLE: Vector Query with Filtering in JavaScript
DESCRIPTION: JavaScript implementation of vector similarity search with metadata filtering using the Upstash Vector client.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query({
  vector: [0.9215, 0.3897],
  filter: "population >= 1000000 AND geography.continent = 'Asia'",
  topK: 5,
  includeMetadata: true,
});

----------------------------------------

TITLE: Upstash Vector Integration with Hosted Embedding Models
DESCRIPTION: Implementation of vector database operations using Upstash's hosted embedding models for chunking, upserting, and querying data.

LANGUAGE: typescript
CODE:
import { Index } from '@upstash/vector'

const index = new Index({
  url: process.env.UPSTASH_VECTOR_REST_URL!,
  token: process.env.UPSTASH_VECTOR_REST_TOKEN!,
})

function generateChunks(input: string): string[] {
  return input
    .trim()
    .split('.')
    .filter(i => i !== '')
}

export async function upsertEmbedding(resourceId: string, content: string) {
  const chunks = generateChunks(content)
  
  const toUpsert = chunks.map((chunk, i) => ({
    id: `${resourceId}-${i}`,
    data: chunk,
    metadata: {
      resourceId,
      content: chunk,
    },
  }))

  await index.upsert(toUpsert)
}

export async function findRelevantContent(query: string, k = 4) {
  const result = await index.query({
    data: query,
    topK: k,
    includeMetadata: true,
  })

  return result
}

----------------------------------------

TITLE: DBSF Score Normalization Formula
DESCRIPTION: Formula used in Distribution-Based Score Fusion to normalize scores based on their statistical distribution

LANGUAGE: plaintext
CODE:
                        s − (μ − 3 * σ)
Normalized Score = -------------------------
                   (μ + 3 * σ) − (μ − 3 * σ)

----------------------------------------

TITLE: Upserting Vector to Specific Namespace using cURL in Upstash Vector Database
DESCRIPTION: This example shows how to upsert a single vector to a specific namespace 'ns' using a curl command. The vector includes an ID, numerical values, and metadata.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "id": "id-2", "vector": [0.1, 0.2], "metadata": { "link": "upstash.com" } }'

----------------------------------------

TITLE: Upserting Vector with Namespace in TypeScript
DESCRIPTION: Demonstrates vector insertion into a specific namespace. This allows for organizing vectors into different logical groupings.

LANGUAGE: typescript
CODE:
await index.upsert([
  {
    id: "6789",
    vector: [0.6, 0.7, 0.8, 0.9, 0.9],
  },
], { namespace: "my-namespace" });

----------------------------------------

TITLE: Upserting Multiple Vectors in TypeScript
DESCRIPTION: Shows how to upsert multiple vectors simultaneously. The example includes two vectors with different IDs and metadata structures.

LANGUAGE: typescript
CODE:
await index.upsert([
  {
    id: "6789",
    vector: [0.6, 0.7, 0.8, 0.9, 0.9],
  },
  {
    id: "1234",
    vector: [0.1, 0.2, 0.3, 0.4, 0.5],
    metadata: {
      title: "Lord of The Rings",
      genre: "drama",
      category: "classic",
    },
  },
]);

----------------------------------------

TITLE: Querying Index Info using cURL
DESCRIPTION: This snippet demonstrates how to make a GET request to the Index Info API endpoint using cURL. It includes the necessary authorization header.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/info \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Range Query with Metadata
DESCRIPTION: Examples demonstrating how to perform range queries with metadata inclusion. Shows pagination using cursor-based navigation and limit parameters.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.range(
    cursor="0",
    limit=3,
    include_metadata=True,
)

LANGUAGE: json
CODE:
{
  "result": {
    "nextCursor": "4",
    "vectors": [
      { "id": "id-0", "metadata": { "url": "https://imgur.com/z9AVZLb" } },
      { "id": "id-1", "metadata": { "url": "https://imgur.com/a2nCEIt" } },
      { "id": "id-2", "metadata": { "url": "https://imgur.com/zfOPmnI" } }
    ]
  }
}

----------------------------------------

TITLE: Resuming a Query in Go
DESCRIPTION: Continues a previously started resumable query in Go by fetching additional similar vectors. This code demonstrates retrieving two additional batches (next 3, then next 5 vectors) using the handle from the initial query.

LANGUAGE: go
CODE:
// next batch of the results
scores, err = handle.Next(vector.ResumableQueryNext{
	AdditionalK: 3,
})
if err != nil {
	log.Fatal(err)
}

for _, score := range scores {
	fmt.Printf("%+v\n", score)
}

// it is possible to call Next more than once
scores, err = handle.Next(vector.ResumableQueryNext{
	AdditionalK: 5,
})
if err != nil {
	log.Fatal(err)
}

for _, score := range scores {
	fmt.Printf("%+v\n", score)
}

----------------------------------------

TITLE: Upserting Vectors with Metadata using Upstash Vector SDK in Python
DESCRIPTION: Example of using the Upstash Vector SDK to upsert a random vector with metadata into the index. It demonstrates client initialization, vector generation, and the upsert operation.

LANGUAGE: python
CODE:
import random
from upstash_vector import Index

# Initialize the index client using environment variables
index = Index.from_env()

def main():
    # Define the dimension based on the index configuration
    dimension = 128
    # Generate a random vector for upsert
    vector_to_upsert = [random.random() for _ in range(dimension)]
    # Additional metadata associated with the vector
    metadata = {"text": "example test for metadata"}

    # Upsert the vector into the index
    index.upsert(vectors=[
        ("id-for-vector", vector_to_upsert, metadata)
    ])

----------------------------------------

TITLE: Querying Text Data with Embedding Model in PHP
DESCRIPTION: This snippet demonstrates how to query an Upstash Vector index using raw text and a pre-selected embedding model in PHP. It initializes the index and performs a query with specified parameters.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->queryData(new DataQuery(
  data: 'What is Upstash?',
  topK: 1,
  includeMetadata: true,
));

----------------------------------------

TITLE: Resetting a Vector Index in Upstash Vector Database (TypeScript)
DESCRIPTION: Examples showing how to reset vector indexes in Upstash Vector database. The first example demonstrates resetting the default namespace, while the second shows how to reset all namespaces by passing the 'all' parameter set to true.

LANGUAGE: typescript
CODE:
const responseReset = await index.reset();
// 'Successful'

LANGUAGE: typescript
CODE:
const responseReset = await index.reset({ all: true });
// 'Successful'

----------------------------------------

TITLE: Upserting Vectors with Data in Python
DESCRIPTION: This code demonstrates how to upsert vectors with metadata and data in Python using the Upstash Vector client. It shows how to add vectors with both metadata and data fields or just the data field.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [
        {
            "id": "id-0",
            "vector": [0.9215, 0.3897],
            "metadata": {"url": "https://imgur.com/z9AVZLb"},
            "data": "data-0",
        },
        {
            "id": "id-1",
            "vector": [0.3897, 0.9215],
            "data": "data-1",
        },
    ],
)

----------------------------------------

TITLE: Upserting Single Vector Data in PHP
DESCRIPTION: Demonstrates how to upsert a single piece of data into an Upstash Vector index using the embedding model. Creates a new Index instance and uses upsertData() to insert or update a vector with an ID and text data.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsertData(new DataUpsert(
  id: '1',
  data: 'The capital of Japan is Tokyo',
));

----------------------------------------

TITLE: Upserting Text Data with Embedding Model in Go
DESCRIPTION: This snippet illustrates how to upsert raw text data into an Upstash Vector index using a pre-selected embedding model in Go. It initializes the index and inserts a text entry with metadata.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	index.UpsertData(vector.UpsertData{
		Id:       "id-0",
		Data:     "Upstash is a serverless data platform.",
		Metadata: map[string]any{"field": "value"},
	})
}

----------------------------------------

TITLE: Resetting All Namespaces in Upstash Vector
DESCRIPTION: Demonstrates how to reset all namespaces in an Upstash Vector index simultaneously. This operation will clear all vectors and metadata from all namespaces in the index.

LANGUAGE: python
CODE:
from upstash_vector import Index
index = Index.from_env()

index.reset(all=True)

----------------------------------------

TITLE: Installing LlamaIndex and Upstash Vector Dependencies
DESCRIPTION: This command installs the necessary Python packages for using LlamaIndex with Upstash Vector, including llama-index, upstash-vector, llama-index-vector-stores-upstash, and python-dotenv.

LANGUAGE: bash
CODE:
pip install llama-index upstash-vector llama-index-vector-stores-upstash python-dotenv

----------------------------------------

TITLE: Upserting Single Vector Data with Namespace in PHP
DESCRIPTION: Shows how to upsert a single vector within a specific namespace in Upstash Vector. Uses the namespace() method to specify a namespace before upserting data.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsertData(new DataUpsert(
  id: '1',
  data: 'The capital of Japan is Tokyo',
));

----------------------------------------

TITLE: Resetting Default Namespace in Upstash Vector
DESCRIPTION: Demonstrates how to reset the default namespace in an Upstash Vector index. This operation will clear all vectors and metadata from the default namespace.

LANGUAGE: python
CODE:
from upstash_vector import Index
index = Index.from_env()

index.reset()

----------------------------------------

TITLE: Sample Output from RAG Queries
DESCRIPTION: Example responses generated by the RAG system for queries about global warming and diet modifications to reduce carbon footprint, showing how the system provides relevant information from the indexed documents.

LANGUAGE: txt
CODE:
Global warming refers to the long-term increase in Earth's average temperature due to the accumulation of greenhouse gases (GHGs) such as carbon dioxide (CO2), methane (CH4), and nitrous oxide (N2O) in the atmosphere. The primary drivers of GHG emissions include the burning of fossil fuels for energy, industrial processes, deforestation, and unsustainable agricultural practices. As these gases trap heat, they create a "greenhouse effect," leading to rising temperatures, melting polar ice caps, rising sea...

Shifting towards plant-based diets, which emphasize the consumption of vegetables, fruits, legumes, grains, and nuts, can significantly reduce our carbon footprint. Plant-based diets have a much lower environmental footprint compared to animal-based foods, particularly red meat, which is highly resource-intensive and contributes disproportionately to greenhouse gas emissions. Studies have shown that reducing the consumption of animal-based foods and increasing the intake of plant-based foods can help red...

----------------------------------------

TITLE: Basic Range Query in Upstash Vector with Python
DESCRIPTION: Example of executing a basic range query in Upstash Vector to retrieve vector data with metadata and data included. The example demonstrates how to set up the index from environment variables and process the returned results.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

# Execute the range query
range_result = index.range(
    cursor="",
    limit=10,
    include_vectors=False,
    include_metadata=True,
    include_data=True,
)

# Print the range result
print("Next Cursor:", range_result.next_cursor)

for vector_info in range_result.vectors:
    print("ID:", vector_info.id)
    print("Vector:", vector_info.vector)
    print("Metadata:", vector_info.metadata)
    print("Data:", vector_info.data)

----------------------------------------

TITLE: Deleting Vectors by Metadata Filter in TypeScript
DESCRIPTION: Shows how to delete vectors using a metadata filter condition. This performs a full scan operation and may be slow for large indexes.

LANGUAGE: typescript
CODE:
const response = await index.delete({
  filter: "age > 30",
});
// { deleted: 3 }

----------------------------------------

TITLE: Configuring Namespace for Upstash Vector Store
DESCRIPTION: Example of how to specify a namespace when creating an Upstash Vector Store instance, which helps to separate different types of documents within the same vector database.

LANGUAGE: python
CODE:
vector_store = UpstashVectorStore(
    url=your_upstash_url, 
    token=your_upstash_token, 
    namespace=your_namespace,
    )

----------------------------------------

TITLE: Deleting Vectors by ID in PHP
DESCRIPTION: This snippet demonstrates how to delete vectors by their IDs using the Upstash Vector SDK in PHP. It initializes an Index object with the necessary credentials and uses the delete() method to remove vectors with specific IDs.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->delete(['1', '2', '3']);

----------------------------------------

TITLE: Filtering Vectors by ID Prefix in Upstash Vector
DESCRIPTION: Example of retrieving vectors with IDs that start with a specific prefix using the range method in Upstash Vector.

LANGUAGE: python
CODE:
index.range(prefix="id-")

----------------------------------------

TITLE: Deleting Vectors by Metadata Filter in PHP
DESCRIPTION: This snippet shows how to delete vectors based on a metadata filter using the Upstash Vector SDK in PHP. It utilizes the VectorDeleteByMetadataFilter class to specify the filter condition.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorDeleteByMetadataFilter;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->delete(new VectorDeleteByMetadataFilter(
  filter: 'salary > 1000',
));

----------------------------------------

TITLE: Specifying Namespace for UpstashVectorStore in Python
DESCRIPTION: This Python code snippet demonstrates how to specify a namespace when creating an UpstashVectorStore instance, which can be useful for organizing different sets of vectors within the same Upstash Vector index.

LANGUAGE: python
CODE:
vector_store = UpstashVectorStore(
    url="your_upstash_url",
    token="your_upstash_token",
    namespace="your_namespace"
)

----------------------------------------

TITLE: Integrating LlamaIndex with Upstash Vector in Python
DESCRIPTION: This Python code demonstrates how to integrate LlamaIndex with Upstash Vector. It includes loading environment variables, initializing the Upstash Vector store, loading documents, and creating a VectorStoreIndex.

LANGUAGE: python
CODE:
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader
from llama_index.vector_stores.upstash import UpstashVectorStore
from llama_index.core import StorageContext
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set OpenAI API key
openai.api_key = os.environ["OPENAI_API_KEY"]

# Initialize Upstash Vector store
upstash_vector_store = UpstashVectorStore(
    url=os.environ["UPSTASH_VECTOR_REST_URL"],
    token=os.environ["UPSTASH_VECTOR_REST_TOKEN"],
)

# Load documents using SimpleDirectoryReader
documents = SimpleDirectoryReader("./documents/").load_data()

# Create a storage context and initialize the index
storage_context = StorageContext.from_defaults(vector_store=upstash_vector_store)
index = VectorStoreIndex.from_documents(
    documents, storage_context=storage_context
)

----------------------------------------

TITLE: Deleting Vectors by ID within a Namespace in PHP
DESCRIPTION: This code shows how to delete vectors by their IDs within a specific namespace using the Upstash Vector SDK in PHP. It creates an Index object and uses the namespace() method before calling delete().

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->delete(['1', '2', '3']);

----------------------------------------

TITLE: Using Namespaces with Range Method in Upstash Vector
DESCRIPTION: Example of specifying a namespace when using the range method in Upstash Vector. This allows for operations on a specific namespace instead of the default one.

LANGUAGE: python
CODE:
index.range(..., namespace="ns")

----------------------------------------

TITLE: Deleting Vectors by ID using cURL in Upstash Vector Database
DESCRIPTION: This cURL command demonstrates how to delete vectors by their IDs from the default namespace in Upstash Vector Database. It sends a DELETE request to the API endpoint with an array of vector IDs to be deleted.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/delete \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "ids": [ "id-0", "id-1" ] }'

----------------------------------------

TITLE: Initializing Upstash Vector Index Client from Environment Variables
DESCRIPTION: Code snippet demonstrating how to initialize the Index client using credentials loaded from environment variables.

LANGUAGE: python
CODE:
from upstash_vector import Index
index = Index.from_env()

----------------------------------------

TITLE: Installing Required Dependencies with pip
DESCRIPTION: Command to install necessary Python packages including llama-index, upstash-vector, and related dependencies.

LANGUAGE: bash
CODE:
pip install llama-index upstash-vector llama-index-vector-stores-upstash python-dotenv

----------------------------------------

TITLE: Upserting Dense and Sparse Vectors in PHP
DESCRIPTION: Demonstration of upserting dense and sparse vectors into an Upstash Vector index using PHP. This approach offers direct control over vector representations.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsert(new VectorUpsert(
  id: 'id-0',
  vector: createRandomVector(384),
  sparseVector: new SparseVector(
    indices: [1, 2, 3],
    values: [5, 6, 7],
  ),
));

----------------------------------------

TITLE: Upserting Dense and Sparse Vectors in PHP
DESCRIPTION: Demonstration of upserting dense and sparse vectors into an Upstash Vector index using PHP. This approach offers direct control over vector representations.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsert(new VectorUpsert(
  id: 'id-0',
  vector: createRandomVector(384),
  sparseVector: new SparseVector(
    indices: [1, 2, 3],
    values: [5, 6, 7],
  ),
));

----------------------------------------

TITLE: Type-Safe Vector Retrieval with Generic Types in TypeScript
DESCRIPTION: An advanced example showing how to use TypeScript generics to provide type safety when working with vector metadata. By defining a custom metadata type, TypeScript can provide proper type checking and autocompletion for metadata properties in the query results.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string;
  genre: "sci-fi" | "fantasy" | "horror" | "action";
};

const responseRange = await index.range<Metadata>({
  cursor: 0,
  limit: 2,
  includeMetadata: true,
});

if (responseRange[0].metadata) {
  // Since we passed the Metadata type parameter above,
  // we can interact with metadata fields without having to
  // do any typecasting.
  const { title, genre } = results[0].metadata;
  console.log(`The best match in fantasy was ${title}`);
}

----------------------------------------

TITLE: Deleting a Vector in a Specific Namespace in Upstash Vector Index using Python
DESCRIPTION: This example demonstrates how to delete a vector from a specific namespace in an Upstash Vector Index. It specifies both the vector ID and the namespace in which the deletion should occur.

LANGUAGE: python
CODE:
index.delete("id-4", namespace="ns")

----------------------------------------

TITLE: Upserting Vector Data using cURL with Upstash Vector REST API
DESCRIPTION: Example of using cURL to upsert vector data into Upstash Vector database. This command sends a POST request to the upsert endpoint with authorization token and vector data payload.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"id": "id-0", "vector": [0.87, 0.99]}'

----------------------------------------

TITLE: Upserting Multiple Vectors using cURL in Upstash Vector Database
DESCRIPTION: This example demonstrates how to upsert multiple vectors at once to the default namespace using a curl command. The vectors include numerical values with optional metadata.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[ 
    { "id": "id-0", "vector": [0.1, 0.2], "metadata": { "link": "upstash.com" } }, 
    { "id": "id-1", "vector": [0.2, 0.3] }
  ]'

----------------------------------------

TITLE: Resuming a Query in JavaScript
DESCRIPTION: Extends a previously started resumable query in JavaScript by fetching the next set of results. The code shows how to fetch two additional batches of results (3 and 3 more vectors) using the fetchNext function.

LANGUAGE: javascript
CODE:
// next batch of the results
let nextResult = await fetchNext(3);

for (let r of nextResult) {
  console.log(r);
}

// it is possible to call fetch_next more than once
nextResult = await fetchNext(3);

for (let r of nextResult) {
  console.log(r);
}

----------------------------------------

TITLE: Deleting Vectors by Metadata Filter within a Namespace in PHP
DESCRIPTION: This code demonstrates deleting vectors using a metadata filter within a specific namespace using the Upstash Vector SDK in PHP. It combines the namespace() method with VectorDeleteByMetadataFilter for targeted deletion.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorDeleteByMetadataFilter;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->delete(new VectorDeleteByMetadataFilter(
  filter: 'salary > 1000',
));

----------------------------------------

TITLE: Sample JSON Response from Index Info API
DESCRIPTION: This snippet shows a sample JSON response from the Index Info API. It includes details about the index such as vector counts, size, dimensions, and configuration for both dense and sparse vectors.

LANGUAGE: json
CODE:
{
  "result": {
    "vectorCount": 7,
    "pendingVectorCount": 0,
    "indexSize": 43501,
    "dimension": 1024,
    "similarityFunction": "COSINE",
    "indexType": "HYBRID",
    "denseIndex": {
      "dimension": 1024,
      "similarityFunction": "COSINE",
      "embeddingModel": "BGE_M3"
    },
    "sparseIndex": {
      "embeddingModel": "BM25"
    },
    "namespaces": {
      "": {
        "vectorCount": 6,
        "pendingVectorCount": 0
      },
      "ns": {
        "vectorCount": 1,
        "pendingVectorCount": 0
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Environment Variables for Upstash Vector
DESCRIPTION: Environment configuration for Upstash Vector implementation including REST URL and token setup

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token

----------------------------------------

TITLE: Resuming a Query with curl
DESCRIPTION: Shows how to continue a previously started resumable query using the REST API with curl. The request includes the UUID of the original query and specifies that 3 additional results should be returned.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query-next \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "uuid": "550e8400-e29b-41d4-a716-446655440000",
    "additionalK": 3
  }'

----------------------------------------

TITLE: Querying Dense Vectors with Namespaces in PHP using Upstash Vector SDK
DESCRIPTION: This snippet shows how to query dense vectors from a specific namespace in Upstash Vector using the PHP SDK. It demonstrates the use of the namespace() method before calling query().

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->namespace('my-namespace')->query(new VectorQuery(
  vector: [0.1, 0.2, ...], // "..." represents the dimension size of your vector index.
  topK: 15, // topK is the limit number of records we want to be returned.
  includeMetadata: true, // (optional) if true the query results will contain metadata.
  includeVectors: true, // (optional) if true the query results will contain the indexed vectors.
  includeData: true, // (optional) if true the query results will contain the string data.
  filter: '', // (optional) if set, the query results will be filtered by the given filter.
));

----------------------------------------

TITLE: Setting up Environment Variables
DESCRIPTION: Configuration of environment variables including Upstash credentials, OpenAI API key, and LlamaCloud API key.

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token
OPENAI_API_KEY=your_openai_api_key
LLAMA_CLOUD_API_KEY=your_llama_cloud_api_key

----------------------------------------

TITLE: Setting Up Environment Variables for Upstash Vector and LlamaParse
DESCRIPTION: This snippet shows the content of a .env file containing the necessary environment variables for Upstash Vector and LlamaParse API keys.

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token
LLAMA_CLOUD_API_KEY=your_llama_cloud_api_key

----------------------------------------

TITLE: Stopping a Resumable Query in Python
DESCRIPTION: Demonstrates how to properly terminate a resumable query in Python to free up server resources using the handle's stop method.

LANGUAGE: python
CODE:
handle.stop()

----------------------------------------

TITLE: Upserting Raw Text Data in JavaScript
DESCRIPTION: This code shows how to upsert raw text data in JavaScript using the Upstash Vector client. It demonstrates how to create vectors from text data without needing to generate embedding vectors manually.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([
  {
    id: "id-2",
    data: "Upstash is a serverless data platform.",
  }
])

----------------------------------------

TITLE: Initializing Client with Configuration Object
DESCRIPTION: Example of initializing the Upstash Vector client using a configuration object with URL and token.

LANGUAGE: typescript
CODE:
import { Index } from "@upstash/vector";

const index = new Index({
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
});

----------------------------------------

TITLE: Accessing Specific Upstash Vector Connection in Laravel
DESCRIPTION: Demonstrates how to access a specific Upstash Vector connection using the Vector facade in Laravel.

LANGUAGE: php
CODE:
use Upstash\Vector\Laravel\Facades\Vector;

Vector::connection('another')->getInfo();

----------------------------------------

TITLE: Resetting Specific Namespace using cURL
DESCRIPTION: This cURL command resets a specific namespace of an Upstash Vector index. It sends a DELETE request to the reset endpoint with the namespace specified in the URL path.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/reset/ns \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Stopping a Resumable Query in JavaScript
DESCRIPTION: Shows how to properly end a resumable query in JavaScript to release server resources using the stop function returned from the initial query.

LANGUAGE: javascript
CODE:
await stop();

----------------------------------------

TITLE: Upserting Vectors Using Dictionaries in Python
DESCRIPTION: This snippet demonstrates how to upsert vectors into an Upstash Vector index using dictionaries. Each dictionary contains keys for id, vector, metadata, and data, representing 100 random vectors.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index

index = Index.from_env()

dimension = 128  # Adjust based on your index's dimension
upsert_amount = 100

vectors = [
    {
        "id": f"generated-id-{i}",
        "vector": [random.random() for _ in range(dimension)],
        "metadata": {"some_field": f"some_value-{i}"},
        "data": f"some-unstructured-data-{i}",
    }
    for i in range(upsert_amount)
]

index.upsert(vectors=vectors)

----------------------------------------

TITLE: Configuring Default Upstash Vector Connection in Laravel
DESCRIPTION: Example configuration for the default Upstash Vector connection in Laravel's config/vector.php file.

LANGUAGE: php
CODE:
return [
    'default' => env('UPSTASH_VECTOR_CONNECTION', 'default'),

    'connections' => [
        'default' => [
            'url' => env('UPSTASH_VECTOR_REST_URL'),
            'token' => env('UPSTASH_VECTOR_REST_TOKEN'),
        ],
    ],
];

----------------------------------------

TITLE: Dependency Injection with IndexInterface in Laravel Controller
DESCRIPTION: Example of using dependency injection to access the Upstash Vector index in a Laravel controller.

LANGUAGE: php
CODE:
namespace App\Http\Controllers;

use Upstash\Vector\Contracts\IndexInterface;

class Controller
{
    public function index(IndexInterface $index)
    {
        $namespaces = $index->listNamespaces();
        
        return response()->json(['namespaces' => $namespaces]);
    }
}

----------------------------------------

TITLE: Resetting All Namespaces using cURL
DESCRIPTION: This cURL command resets all namespaces of an Upstash Vector index. It sends a DELETE request to the reset endpoint with the 'all' query parameter.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/reset?all \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Stopping a Resumable Query in Go
DESCRIPTION: Demonstrates how to properly terminate a resumable query in Go to free up server resources using the handle's Close method.

LANGUAGE: go
CODE:
handle.Close()

----------------------------------------

TITLE: Fetching Single Vector in Upstash Vector
DESCRIPTION: Shows how to fetch a single vector using its ID from the Upstash Vector index.

LANGUAGE: python
CODE:
index.fetch("id-4")

----------------------------------------

TITLE: Setting environment variables for Upstash Vector
DESCRIPTION: Bash commands to set the required environment variables for connecting to Upstash Vector service, including the REST URL and token.

LANGUAGE: bash
CODE:
UPSTASH_VECTOR_REST_URL="your_rest_url"
UPSTASH_VECTOR_REST_TOKEN="your_rest_token"

----------------------------------------

TITLE: JSON Response for a Random Vector Request
DESCRIPTION: Example of a successful response when fetching a random vector. The response includes the vector's ID and its vector values as a numeric array.

LANGUAGE: json
CODE:
{
    "result": {
        "id": "id-0",
        "vector": [0.1, 0.2]
    }
}

----------------------------------------

TITLE: Stopping a Resumable Query with curl
DESCRIPTION: Shows how to properly terminate a resumable query using the REST API with curl. The request includes the UUID of the query that should be stopped.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query-end \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "uuid": "550e8400-e29b-41d4-a716-446655440000"
  }'

----------------------------------------

TITLE: Updating Vector Metadata in TypeScript
DESCRIPTION: Shows how to update existing vector metadata using upsert and update operations. The example demonstrates updating the title metadata of a vector.

LANGUAGE: typescript
CODE:
await index.upsert({
	id: "1234",
	vector: [0.1, 0.2, 0.3, 0.4, 0.5]
	metadata: {
		title: "Redis"
	}
})

await index.update({
	id: "1234",
	metadata: {
		title: "QStash"
	}
})

----------------------------------------

TITLE: Fetching a Random Vector from a Specific Namespace with curl
DESCRIPTION: Makes a GET request to fetch a random vector from a specific namespace ('ns') using curl. Requires authentication with an Upstash Vector REST token.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/random/ns \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Fetching a Random Vector with curl
DESCRIPTION: Makes a GET request to fetch a random vector from the default namespace using curl. Requires authentication with an Upstash Vector REST token.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/random \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Fetching All Results with Resumable Query in Python for Upstash Vector Database
DESCRIPTION: This example shows how to fetch all results using a resumable query, demonstrating a pattern for efficiently retrieving large result sets without loading everything into memory at once.

LANGUAGE: python
CODE:
query = index.resumable_query(
  vector=[0.1, 0.2],
  top_k=2,
  include_metadata=True
)
results = query.start()
while True:
  next_batch = query.fetch_next(2)
  if not next_batch:
    break
  results.extend(next_batch)
query.stop()

----------------------------------------

TITLE: Updating Vector Metadata in Upstash Vector Database using PHP
DESCRIPTION: This code demonstrates how to update only the metadata of an existing vector in an Upstash Vector index. It updates the vector with ID '1' to have metadata with key 'foo' and value 'baz', using the OVERWRITE update mode.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpdate;
use Upstash\Vector\Enums\UpdateMode;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->update(new VectorUpdate(
  id: '1',
  metadata: ['foo' => 'baz'],
  metadataUpdateMode: UpdateMode::OVERWRITE,
));

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Environment variable setup for Upstash Vector authentication.

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token

----------------------------------------

TITLE: Calculating Euclidean Distance Score
DESCRIPTION: Formula for calculating the normalized Euclidean distance score between two vectors. The result is normalized to a range of 0 to 1 using a reciprocal function.

LANGUAGE: mathematical
CODE:
1 / (1 + squared_distance(v1, v2))

----------------------------------------

TITLE: Installing Required Python Dependencies
DESCRIPTION: Command to install the necessary Python packages: upstash-vector and python-dotenv

LANGUAGE: bash
CODE:
pip install upstash-vector python-dotenv

----------------------------------------

TITLE: Configuring Max Idle Time in Python
DESCRIPTION: Sets a custom maximum idle time (2 hours) for a resumable query in Python. This determines how long the query can remain inactive before being automatically terminated by the server.

LANGUAGE: python
CODE:
result, handle = index.resumable_query(
    vector=[0.1, 0.2],
    top_k=2,
    include_metadata=True,
    max_idle = 7200, # two hours, in seconds
)

----------------------------------------

TITLE: Deleting Single Vector by ID in TypeScript
DESCRIPTION: Shows how to delete a single vector by providing its ID. Returns the number of successfully deleted vectors.

LANGUAGE: typescript
CODE:
const response = await index.delete("2");
// { deleted: 1 }

----------------------------------------

TITLE: Calculating Cosine Similarity Score
DESCRIPTION: Formula for calculating the normalized cosine similarity score between two vectors. The result is normalized to a range of 0 to 1.

LANGUAGE: mathematical
CODE:
(1 + cosine_similarity(v1, v2)) / 2

----------------------------------------

TITLE: Installing LangChain and Upstash Vector Dependencies
DESCRIPTION: This command installs the necessary Python packages for using LangChain with Upstash Vector, including the Upstash Vector client, LangChain, and python-dotenv for environment variable management.

LANGUAGE: bash
CODE:
pip install upstash-vector langchain langchain-community python-dotenv

----------------------------------------

TITLE: Configuring Max Idle Time in Go
DESCRIPTION: Sets a custom maximum idle time (2 hours) for a resumable query in Go. This setting determines how long the query can remain unused before being automatically terminated by the server.

LANGUAGE: go
CODE:
scores, handle, err := index.ResumableQuery(vector.ResumableQuery{
	Vector:          []float32{0.1, 0.2},
	TopK:            2,
	IncludeMetadata: true,
	MaxIdle:         7200, // two hours, in seconds
})

----------------------------------------

TITLE: Query Operations with Vector Values
DESCRIPTION: Example of querying with vector values including type definition and sample query with results.

LANGUAGE: typescript
CODE:
type QueryOptions = {
  vector: number[];
  topK: number;
  includeVectors?: boolean;
  includeMetadata?: boolean;
};

> await index.query({ topK: 3, vector: [ ... ]})
{
  matches: [
    {
      id: '6345',
      score: 1.00000012,
      vector: [],
      metadata: undefined
    },
    {
      id: '1233',
      score: 1.00000012,
      vector: [],
      metadata: undefined
    },
    {
      id: '4142',
      score: 1.00000012,
      vector: [],
      metadata: undefined
    }
  ],
  namespace: ''
}

----------------------------------------

TITLE: Installing Required Libraries for LlamaIndex with Upstash Vector
DESCRIPTION: Installs the necessary Python packages via pip to use LlamaIndex with Upstash Vector store, including the core libraries and integration packages.

LANGUAGE: bash
CODE:
pip install llama-index upstash-vector llama-index-vector-stores-upstash python-dotenv

----------------------------------------

TITLE: Installing upstash-vector SDK via pip
DESCRIPTION: Command to install the upstash-vector package using pip package manager.

LANGUAGE: bash
CODE:
pip install upstash-vector

----------------------------------------

TITLE: Configuring Max Idle Time with curl
DESCRIPTION: Sets a custom maximum idle time (2 hours) for a resumable query using the REST API with curl. This defines how long the query can remain inactive before being automatically terminated.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "vector": [0.1, 0.2],
    "topK": 2,
    "includeMetadata": true,
    "maxIdle": 7200
  }'

----------------------------------------

TITLE: Querying Sparse Vectors with Namespaces in PHP using Upstash Vector SDK
DESCRIPTION: This snippet demonstrates how to query sparse vectors from a specific namespace in Upstash Vector using the PHP SDK. It shows the use of the namespace() method before querying sparse vectors.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->namespace('my-namespace')->query(new VectorQuery(
  sparseVector: new SparseVector(
    indices: [1, 2, 3],
    values: [5.0, 6.0, 7.0],
  ),
  topK: 15,
));

----------------------------------------

TITLE: Installing @upstash/vector package using pnpm
DESCRIPTION: Command to install the @upstash/vector package using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm add @upstash/vector

----------------------------------------

TITLE: Installing @upstash/vector package using npm
DESCRIPTION: Command to install the @upstash/vector package using npm package manager.

LANGUAGE: shell
CODE:
npm install @upstash/vector

----------------------------------------

TITLE: Performing Resumable Vector Query using curl
DESCRIPTION: Example of a basic resumable vector query request using curl. This request includes a vector, sets topK to 2, includes metadata in the response, and sets a maximum idle time of 3600 seconds.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "vector": [0.1, 0.2],
    "topK": 2,
    "includeMetadata": true,
    "maxIdle": 3600
  }'

----------------------------------------

TITLE: Querying Range Vectors with curl
DESCRIPTION: Makes an HTTP GET request to fetch vectors from the default namespace with pagination. This request includes a cursor starting at "0", limits the response to 2 vectors, and includes metadata in the response.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/range \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "cursor": "0", "limit": 2, "includeMetadata": true }'

----------------------------------------

TITLE: Installing Upstash Vector Client
DESCRIPTION: Commands to install the Upstash Vector client using npm or pnpm package managers.

LANGUAGE: bash
CODE:
npm install @upstash/vector
pnpm add @upstash/vector

----------------------------------------

TITLE: Installing Bun Package Manager
DESCRIPTION: Command to install Bun, which is used for packaging and dependency management in this project. This is a prerequisite for working with the codebase.

LANGUAGE: commandline
CODE:
curl -fsSL https://bun.sh/install | bash

----------------------------------------

TITLE: Starting Flowise Server
DESCRIPTION: Command to start the Flowise server, which will be accessible at http://localhost:3000.

LANGUAGE: bash
CODE:
npx flowise start

----------------------------------------

TITLE: Stopping a Resumable Vector Query using cURL
DESCRIPTION: This example demonstrates how to end a resumable vector query using cURL. The request requires the UUID of the query to be stopped and authorization via a bearer token.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query-end \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "uuid": "550e8400-e29b-41d4-a716-446655440000"
  }'

----------------------------------------

TITLE: Fetching Vectors by ID in PHP using Upstash Vector
DESCRIPTION: This snippet demonstrates how to fetch specific vectors from Upstash Vector using their unique IDs. It initializes an Index object with Upstash credentials and uses the fetch() method with VectorFetch to retrieve vectors.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorFetch;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->fetch(new VectorFetch(
  ids: ['1', '2'],
  includeMetadata: true, // (optional) if true the fetch results will contain metadata.
  includeVectors: true, // (optional) if true the fetch results will contain the indexed vectors.
  includeData: true, // (optional) if true the fetch results will contain the string data.
));

----------------------------------------

TITLE: Error Response for Invalid Vector Dimension in Upstash
DESCRIPTION: JSON error response returned when the vector dimensions don't match the expected dimensions of the index, with a 422 Unprocessable Entity status code.

LANGUAGE: json
CODE:
{
    "error": "Invalid vector dimension: 2, expected: 256",
    "status": 422
}

----------------------------------------

TITLE: Resetting Index
DESCRIPTION: Example of resetting (deleting all data from) an index.

LANGUAGE: typescript
CODE:
await index.reset();

----------------------------------------

TITLE: Upserting Text Data with Embedding Model in Python
DESCRIPTION: This snippet demonstrates how to upsert raw text data into an Upstash Vector index using a pre-selected embedding model in Python. It initializes the index and inserts a text entry with metadata.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [("id-0", "Upstash is a serverless data platform.", {"field": "value"})],
)

----------------------------------------

TITLE: Sample Metadata Structure in JSON
DESCRIPTION: Example of a metadata structure that can be used for filtering in Upstash Vector, showing nested objects and arrays.

LANGUAGE: json
CODE:
{
    "city": "Istanbul",
    "country": "Turkey",
    "is_capital": false,
    "population": 15460000,
    "geography": {
        "continent": "Asia",
        "coordinates": {
            "latitude": 41.0082,
            "longitude": 28.9784
        }
    },
    "economy": {
        "currency": "TRY",
        "major_industries": [
            "Tourism",
            "Textiles",
            "Finance"
        ]
    }
}

----------------------------------------

TITLE: Example Query Response Output
DESCRIPTION: Sample output from querying the parsed document about global warming.

LANGUAGE: plaintext
CODE:
The main points discussed in the document include the impact of global warming on agriculture 
and food production systems, the importance of adopting sustainable food practices to mitigate 
these effects, the role of agriculture in contributing to global warming through GHG emissions, 
deforestation, and the use of synthetic fertilizers, and the need for sustainable food systems 
to address environmental challenges and ensure food security for future generations.

----------------------------------------

TITLE: Publishing Upstash Vector Configuration in Laravel
DESCRIPTION: Artisan command to publish the Upstash Vector configuration file in a Laravel project.

LANGUAGE: shell
CODE:
php artisan vendor:publish --tag="vector-config"

----------------------------------------

TITLE: Installing Dependencies with Package Managers
DESCRIPTION: Commands to install required packages including AI SDK, OpenAI, Zod, and Upstash Vector using different package managers.

LANGUAGE: bash
CODE:
npm install @ai-sdk/openai ai zod @upstash/vector

----------------------------------------

TITLE: Upserting Text Data with Embedding Model in PHP
DESCRIPTION: This snippet demonstrates how to upsert raw text data into an Upstash Vector index using a pre-selected embedding model in PHP. It initializes the index and inserts a text entry with metadata.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsertData(new DataUpsert(
  id: 'id-0',
  data: 'Upstash is a serverless data platform.',
  metadata: [
    'field' => 'value',
  ],
));

----------------------------------------

TITLE: Filtering Vectors by ID Prefix in Upstash Vector Database
DESCRIPTION: This example demonstrates how to use the prefix parameter to filter vectors by their ID. The range method will only return vectors whose IDs start with the specified prefix. This is useful for organizing and retrieving related vectors.

LANGUAGE: typescript
CODE:
const responseRange = await index.range({
  cursor: 0,
  limit: 2,
  prefix: "test-",
});

/*
{
  nextCursor: '2',
  vectors: [
    { id: 'test-1' },
    { id: 'test-2' },
  ]
}
*/

----------------------------------------

TITLE: Installing Flowise via NPM
DESCRIPTION: Command to globally install Flowise using npm package manager.

LANGUAGE: bash
CODE:
npm install -g flowise

----------------------------------------

TITLE: Error Response Example
DESCRIPTION: Example of an error response when the specified namespace does not exist, returning a 404 Not Found status code.

LANGUAGE: json
CODE:
{
    "error": "Namespace ns for the index $NAME does not exist",
    "status": 404
}

----------------------------------------

TITLE: Upserting Text Data with Embedding Model using cURL
DESCRIPTION: This snippet shows how to upsert raw text data into an Upstash Vector index using a pre-selected embedding model via cURL. It sends a POST request to insert a text entry with metadata.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"id": "1", "data": "Upstash is a serverless data platform.", "metadata": {"field": "value"}}'

----------------------------------------

TITLE: Displaying Similarity Search Results
DESCRIPTION: This snippet shows the expected output of the similarity search performed in the previous Python script. It demonstrates how the results are ranked based on their relevance to the query "What is LangChain?"

LANGUAGE: plaintext
CODE:
Similarity Search Results:
LangChain is a framework for building intelligent apps.
Semantic search enables advanced query matching.
Upstash Vector is a scalable vector database.

----------------------------------------

TITLE: Successful Response Example
DESCRIPTION: Example of a successful response when deleting a namespace, returning a 200 OK status code.

LANGUAGE: json
CODE:
{
    "result": "Success"
}

----------------------------------------

TITLE: Running the Chatbot Application with npm
DESCRIPTION: This command starts the development server for the RAG chatbot application, allowing users to interact with the interface in their browser.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Upserting Text Data in PHP
DESCRIPTION: Demonstration of upserting text data into an Upstash Vector index with hosted embedding models using PHP. This approach simplifies data insertion by handling embedding internally.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsertData(new DataUpsert(
  id: 'id-0',
  data: 'Upstash Vector provides dense and sparse embedding models.',
));

----------------------------------------

TITLE: Resetting Default Namespace using cURL
DESCRIPTION: This cURL command resets the default namespace of an Upstash Vector index. It sends a DELETE request to the reset endpoint with the authorization token.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/reset \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Upserting Vectors with Data in PHP
DESCRIPTION: This code demonstrates how to upsert vectors with data in PHP using the Upstash Vector client. It shows how to create vector upsert objects with vector values and data fields.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsertMany([
  new VectorUpsert(
    id: 'id-0',
    vector: [0.9215, 0.3897],
    data: 'data-0',
  ),
  new VectorUpsert(
    id: 'id-1',
    vector: [0.3897, 0.9215],
    data: 'data-1',
  ),
]);

----------------------------------------

TITLE: Upserting Sparse Vectors in JavaScript using Upstash Vector
DESCRIPTION: Demonstrates how to upsert sparse vectors into Upstash Vector indexes using the JavaScript SDK. It shows the creation of an Index object and upserting a vector with a sparse representation.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([{
  id: 'id-0',
  sparseVector: {
    indices: [2, 3],
    values: [0.13, 0.87],
  },
}])

----------------------------------------

TITLE: Setting Up Environment Variables for Upstash Vector and OpenAI
DESCRIPTION: This snippet shows the contents of a .env file containing the necessary environment variables: UPSTASH_VECTOR_REST_URL, UPSTASH_VECTOR_REST_TOKEN, and OPENAI_API_KEY.

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token
OPENAI_API_KEY=your_openai_api_key

----------------------------------------

TITLE: Upserting Raw Text Data in Python
DESCRIPTION: This code demonstrates how to upsert raw text data in Python using the Upstash Vector client. When upserting raw text, the data field is automatically set to the text content without needing to specify vectors.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [
        {
            "id": "id-2",
            "data": "Upstash is a serverless data platform.",
        },
    ],
)

----------------------------------------

TITLE: Resetting Default Namespace in Vector Index
DESCRIPTION: Shows how to reset the default namespace of a Vector index using the reset() method. Requires Upstash Vector REST URL and token credentials.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->reset();

----------------------------------------

TITLE: Upserting Raw Text Data in PHP
DESCRIPTION: This code demonstrates how to upsert raw text data in PHP using the Upstash Vector client. It uses the DataUpsert class to create a vector from text data without specifying vector values.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsertData(new DataUpsert(
  id: 'id-0',
  data: 'Upstash is a serverless data platform.',
));

----------------------------------------

TITLE: Resetting Specific Namespace in Upstash Vector
DESCRIPTION: Shows how to reset a specific namespace in an Upstash Vector index by providing the namespace name. This will clear all vectors and metadata from the specified namespace.

LANGUAGE: python
CODE:
from upstash_vector import Index
index = Index.from_env()

index.reset(namespace="ns")

----------------------------------------

TITLE: Upserting Raw Text Data using curl
DESCRIPTION: This code shows how to upsert raw text data using curl commands with the Upstash Vector REST API. It demonstrates the endpoint and JSON structure for upserting text data without vector values.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
        "id": "id-0",
        "data": "Upstash is a serverless data platform."
      }'

----------------------------------------

TITLE: Calculating Dot Product Score
DESCRIPTION: Formula for calculating the normalized dot product score between two vectors. Requires normalized vectors of unit length and produces a result between 0 and 1.

LANGUAGE: mathematical
CODE:
(1 + dot_product(v1, v2)) / 2

----------------------------------------

TITLE: Deleting Namespaces
DESCRIPTION: Examples demonstrating how to delete a specific namespace using different programming languages. Shows the process of removing a namespace named 'ns' from the vector index.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.delete_namespace("ns")

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.deleteNamespace("ns")

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	namespace := index.Namespace("ns")

	namespace.DeleteNamespace()
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->namespace('ns')->deleteNamespace();

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/delete-namespace/ns \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Deleting Vectors by ID Prefix in PHP
DESCRIPTION: This snippet illustrates how to delete vectors based on an ID prefix using the Upstash Vector SDK in PHP. It uses the VectorDeleteByPrefix class to specify the prefix for deletion.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorDeleteByPrefix;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->delete(new VectorDeleteByPrefix(
  prefix: 'users:',
));

----------------------------------------

TITLE: Error Response from Upstash Vector REST API
DESCRIPTION: Example of an error JSON response from the Upstash Vector REST API. The response includes an error message and HTTP status code when authentication fails.

LANGUAGE: json
CODE:
{
  "error": "Unauthorized: Invalid auth token",
  "status": 401
}

----------------------------------------

TITLE: Fetching Vectors by ID with Namespace in PHP using Upstash Vector
DESCRIPTION: This snippet shows how to fetch specific vectors from a namespace in Upstash Vector. It uses the namespace() method before calling fetch() to specify the namespace for the operation.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorFetch;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->namespace('my-namespace')->fetch(new VectorFetch(
  ids: ['1', '2'],
  includeMetadata: true, // (optional) if true the fetch results will contain metadata.
  includeVectors: true, // (optional) if true the fetch results will contain the indexed vectors.
  includeData: true, // (optional) if true the fetch results will contain the string data.
));

----------------------------------------

TITLE: Deleting Namespace using cURL
DESCRIPTION: Example of how to delete a namespace using cURL with authentication token. This command sends a DELETE request to the vector index endpoint.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/delete-namespace/ns \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Installing Required Dependencies for RAG Application
DESCRIPTION: Command to install all necessary libraries for building a RAG application with Gradio, LangChain, Hugging Face embeddings, and Upstash Vector.

LANGUAGE: bash
CODE:
pip install gradio langchain sentence_transformers upstash-vector python-dotenv transformers langchain-community langchain-huggingface

----------------------------------------

TITLE: Handling Non-Existent Vectors in TypeScript
DESCRIPTION: Shows how the fetch command responds when one of the requested vector IDs does not exist in the database.

LANGUAGE: typescript
CODE:
await index.fetch(["2", "3"]);
// [{ id: "2" }, null]

----------------------------------------

TITLE: Resetting All Namespaces in Vector Index
DESCRIPTION: Shows how to reset all namespaces in a Vector index using the resetAll() method. This operation will clear all data across all namespaces in the index.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->resetAll();

----------------------------------------

TITLE: Fetching Vectors by ID Prefix in TypeScript
DESCRIPTION: Illustrates how to use the fetch command with a prefix to retrieve multiple vectors whose IDs start with a specific string.

LANGUAGE: typescript
CODE:
await index.fetch({ prefix: "test-" });
// [{ id: "test-1" }, { id: "test-2" }, { id: "test-3" }]

----------------------------------------

TITLE: Updating Vector Values in a Namespace using curl
DESCRIPTION: Example of updating vector values for a vector with ID 'id-2' in the 'ns' namespace using the curl command. This request specifically updates the vector value to [0.1, 0.2].

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/update/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "id": "id-2", "vector": [0.1, 0.2] }'

----------------------------------------

TITLE: Accessing Index with Fetch Operation
DESCRIPTION: Example of accessing an index using the fetch operation with metadata and vector inclusion options.

LANGUAGE: typescript
CODE:
await index.fetch([....], { includeMetadata: true, includeVectors: true });

----------------------------------------

TITLE: Querying Range Vectors from Specific Namespace with curl
DESCRIPTION: Makes an HTTP GET request to fetch vectors from a specified namespace ("ns") with pagination. This request includes a cursor starting at "0", limits the response to 2 vectors, and includes metadata in the response.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/range/ns \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "cursor": "0", "limit": 2, "includeMetadata": true }'

----------------------------------------

TITLE: Fetching Records by ID
DESCRIPTION: Example of fetching multiple records by their IDs.

LANGUAGE: typescript
CODE:
const fetchResult = await index.fetch(["id-1", "id-2"]);

----------------------------------------

TITLE: Fetching Vectors using cURL
DESCRIPTION: Example of fetching vectors using cURL with basic configuration and metadata inclusion

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/fetch \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "ids": ["id-0"], "includeMetadata": true }'

----------------------------------------

TITLE: Deleting a Single Vector in Upstash Vector Index using Python
DESCRIPTION: This code snippet shows how to delete a single vector from an Upstash Vector Index using its ID. It's a simpler version of the delete method for when only one vector needs to be removed.

LANGUAGE: python
CODE:
index.delete("id-4")

----------------------------------------

TITLE: Comparing Dense and Sparse Vector Representations in Python
DESCRIPTION: Demonstrates the difference between dense and sparse vector representations, showing how sparse vectors use two arrays to represent non-zero dimensions and their values.

LANGUAGE: python
CODE:
dense = [0.1, 0.3, , ...thousands of non-zero values..., 0.5, 0.2]

sparse = (
    [23, 42, 5523, 123987, 240001], # some low number of dimension indices
    [0.1, 0.3, 0.1, 0.2, 0.5], # non-zero values corresponding to dimensions
)

----------------------------------------

TITLE: Successful Response from Resumable Query End API
DESCRIPTION: This JSON response shows a successful result from ending a resumable query. The response simply contains a 'result' field with a 'Success' message.

LANGUAGE: json
CODE:
{
  "result": "Success"
}

----------------------------------------

TITLE: Updating Vector with Custom Namespace
DESCRIPTION: Demonstrates how to update a vector within a specific namespace instead of the default namespace.

LANGUAGE: python
CODE:
index.update(..., namespace="ns")

----------------------------------------

TITLE: Deleting Vectors by ID Prefix within a Namespace in PHP
DESCRIPTION: This code demonstrates deleting vectors by ID prefix within a specific namespace using the Upstash Vector SDK in PHP. It combines the namespace() method with VectorDeleteByPrefix for targeted deletion.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorDeleteByPrefix;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->delete(new VectorDeleteByPrefix(
  prefix: 'users:',
));

----------------------------------------

TITLE: Configuring Max Idle Time in JavaScript
DESCRIPTION: Sets a custom maximum idle time (2 hours) for a resumable query in JavaScript. This parameter defines how long a query can remain inactive before the server automatically terminates it.

LANGUAGE: javascript
CODE:
const { result, fetchNext, stop } = await index.resumableQuery({
  vector: [0.1, 0.2],
  topK: 2,
  includeMetadata: true,
  maxIdle: 7200, // two hours, in seconds
});

----------------------------------------

TITLE: Resetting Specific Namespace in Vector Index
DESCRIPTION: Demonstrates how to reset a specific namespace within a Vector index. Uses the namespace() method to target a specific namespace before calling reset().

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->reset();

----------------------------------------

TITLE: Successful Response JSON
DESCRIPTION: Example of a successful response from the upsert API endpoint indicating the operation completed successfully.

LANGUAGE: json
CODE:
{
    "result": "Success"
}

----------------------------------------

TITLE: Accessing Vector Index Metadata Properties in PHP
DESCRIPTION: Shows how to access various properties of the IndexInfo object to retrieve metadata such as vector counts, pending vectors, index size, dimensions, and similarity function. Also demonstrates accessing namespace-specific information.

LANGUAGE: php
CODE:
// To know the number of vectors ready to query.
$info->vectorCount;

// To know the number of vectors that are getting indexed.
$info->pendingVectorCount;

// To know the size of the index in bytes.
$info->indexSize;

// To know the dimensions of your vector index.
$info->dimension;

// To know which similarity function is being used.
$info->similarityFunction;

// To get information about a specific index you can (More on next section):
$namespaceInfo = $info->namespace('my-namespace');

----------------------------------------

TITLE: Vector Update API Response Format
DESCRIPTION: Example of a successful response from the Update Vector API. The response indicates that 1 vector was updated successfully with a 200 OK status code.

LANGUAGE: json
CODE:
{
    "result": {
        "updated": 1
    }
}

----------------------------------------

TITLE: Installing Langflow and Upstash Vector Libraries via pip
DESCRIPTION: Command to install both the Langflow framework and Upstash Vector client library using pip. This installation is required before building workflows that integrate vector search capabilities.

LANGUAGE: bash
CODE:
pip install langflow upstash-vector

----------------------------------------

TITLE: Batch Upserting Vector Data in PHP
DESCRIPTION: Demonstrates how to upsert multiple vectors simultaneously using upsertDataMany(). Efficiently inserts or updates multiple vectors in a single operation, with a recommended limit of 1,000 records per batch.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsertDataMany([
  new DataUpsert(id: '1', data: 'The capital of Japan is Tokyo'),
  new DataUpsert(id: '2', data: 'The capital of France is Paris'),
  new DataUpsert(id: '3', data: 'The capital of Germany is Berlin'),
]);

----------------------------------------

TITLE: Successful Response from Upstash Vector REST API
DESCRIPTION: Example of a successful JSON response from the Upstash Vector REST API. The response includes a result field with a success message.

LANGUAGE: json
CODE:
{ "result": "Success" }

----------------------------------------

TITLE: Batch Upserting Vector Data with Namespace in PHP
DESCRIPTION: Shows how to perform batch vector upserts within a specific namespace. Combines namespace specification with batch upserting for organized data management.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsertDataMany([
  new DataUpsert(id: '1', data: 'The capital of Japan is Tokyo'),
  new DataUpsert(id: '2', data: 'The capital of France is Paris'),
  new DataUpsert(id: '3', data: 'The capital of Germany is Berlin'),
]);

----------------------------------------

TITLE: List Namespaces Response Example
DESCRIPTION: Example JSON response showing the list of namespace names. The response includes the default empty namespace and any additional custom namespaces.

LANGUAGE: json
CODE:
{
    "result": ["", "ns0", "ns1"]
}

----------------------------------------

TITLE: Upserting Multiple Vectors in Upstash Vector Database using PHP
DESCRIPTION: This code demonstrates how to upsert multiple vectors at once into an Upstash Vector index. It creates two random vectors with 1536 dimensions each and assigns them IDs '1' and '2'. Batching operations improves performance.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsertMany([
  new VectorUpsert(
    id: '1',
    vector: createRandomVector(dimensions: 1536)
  ),
  new VectorUpsert(
    id: '2',
    vector: createRandomVector(dimensions: 1536)
  ),
]);

----------------------------------------

TITLE: Resumable Vector Query Response Structure
DESCRIPTION: Example of a successful response from a resumable vector query. The response includes a UUID for the query and an array of scored results, with each result containing an ID, similarity score, and optional metadata.

LANGUAGE: json
CODE:
{
  "uuid": "550e8400-e29b-41d4-a716-446655440000",
  "scores": [
    {
      "id": "id-0",
      "score": 1.0,
      "metadata": {
        "link": "upstash.com"
      }
    },
    {
      "id": "id-1",
      "score": 0.99996454
    }
  ]
}

----------------------------------------

TITLE: Upserting Multiple Vectors with Namespace in Upstash Vector Database using PHP
DESCRIPTION: This code shows how to batch upsert multiple vectors into a specific namespace within an Upstash Vector index. It creates two random vectors with 1536 dimensions each and assigns them IDs '1' and '2' within the 'my-namespace' namespace.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsertMany([
  new VectorUpsert(
    id: '1',
    vector: createRandomVector(dimensions: 1536)
  ),
  new VectorUpsert(
    id: '2',
    vector: createRandomVector(dimensions: 1536)
  ),
]);

----------------------------------------

TITLE: Adding Entries to Semantic Cache with Upstash Vector in JavaScript
DESCRIPTION: This snippet illustrates how to add new entries to the semantic cache. It shows the process of inserting key-value pairs into the cache, which can later be retrieved through semantic searches.

LANGUAGE: javascript
CODE:
await cache.put("key1", "The capital of France is Paris.");
await cache.put("key2", "Paris is known as the City of Light.");

----------------------------------------

TITLE: Updating Vector Metadata with Namespace in Upstash Vector Database using PHP
DESCRIPTION: This code shows how to update the metadata of an existing vector in a specific namespace within an Upstash Vector index. It updates the vector with ID '1' in 'my-namespace' to have metadata with key 'foo' and value 'baz'.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpdate;
use Upstash\Vector\Enums\UpdateMode;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->update(new VectorUpdate(
  id: '1',
  metadata: ['foo' => 'baz'],
  metadataUpdateMode: UpdateMode::OVERWRITE,
));

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installing necessary Python packages using pip.

LANGUAGE: bash
CODE:
pip install upstash-vector python-dotenv langchain langchain-community

----------------------------------------

TITLE: Upserting Sparse Vectors in Upstash Vector Database using PHP
DESCRIPTION: This code demonstrates how to upsert a sparse vector into an Upstash Vector index. Sparse vectors require specific indices and their corresponding values. This example creates a sparse vector with indices [0, 1] and values [1.0, 2.0].

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsert(new VectorUpsert(
  id: '1',
  sparseVector: new SparseVector(
    indices: [0, 1],
    values: [1.0, 2.0],
  ),
));

----------------------------------------

TITLE: Range Vectors Response Example (200 OK)
DESCRIPTION: Shows the JSON response structure for a successful Range Vectors request. The response includes a nextCursor for pagination and an array of vector objects, each containing an ID and optional metadata.

LANGUAGE: json
CODE:
{
    "result": {
        "nextCursor": "2",
        "vectors": [
            {
                "id": "id-0",
                "metadata": {
                    "link": "upstash.com"
                }
            },
            {
                "id": "id-1"
            }
        ]
    }
}

----------------------------------------

TITLE: Running Code Formatter
DESCRIPTION: Command to run the code formatter using Bun. This ensures consistent code style across the project.

LANGUAGE: bash
CODE:
bun run fmt

----------------------------------------

TITLE: Upserting Sparse Vectors with Namespace in Upstash Vector Database using PHP
DESCRIPTION: This code shows how to upsert a sparse vector into a specific namespace within an Upstash Vector index. It creates a sparse vector with indices [0, 1] and values [1.0, 2.0] within the 'my-namespace' namespace.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsert(new VectorUpsert(
  id: '1',
  sparseVector: new SparseVector(
    indices: [0, 1],
    values: [1.0, 2.0],
  ),
));

----------------------------------------

TITLE: Successful Response for Deleting Vectors in Upstash Vector Database
DESCRIPTION: This JSON response represents a successful deletion operation in Upstash Vector Database. It includes the number of vectors that were successfully deleted in the 'deleted' field.

LANGUAGE: json
CODE:
{
    "result": {
        "deleted": 2
    }
}

----------------------------------------

TITLE: Upserting Hybrid Vectors in Upstash Vector Database using PHP
DESCRIPTION: This code demonstrates how to upsert a hybrid vector (containing both dense and sparse vectors) into an Upstash Vector index. It creates a random dense vector with 1536 dimensions and a sparse vector with indices [0, 1] and values [1.0, 2.0].

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsert(new VectorUpsert(
  id: '1',
  vector: createRandomVector(dimensions: 1536),
  sparseVector: new SparseVector(
    indices: [0, 1],
    values: [1.0, 2.0],
  ),
));

----------------------------------------

TITLE: Sample Response Format for Vector Fetch API
DESCRIPTION: Example JSON response showing the structure of fetched vector data including metadata

LANGUAGE: json
CODE:
{
    "result": [
        {
            "id": "id-0",
            "metadata": {
                "link": "upstash.com"
            }
        },
        {
            "id": "id-1"
        }
    ]
}

----------------------------------------

TITLE: Upserting Hybrid Vectors with Namespace in Upstash Vector Database using PHP
DESCRIPTION: This code shows how to upsert a hybrid vector into a specific namespace within an Upstash Vector index. It combines a random dense vector with 1536 dimensions and a sparse vector with indices [0, 1] and values [1.0, 2.0] in the 'my-namespace' namespace.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsert(new VectorUpsert(
  id: '1',
  vector: createRandomVector(dimensions: 1536),
  sparseVector: new SparseVector(
    indices: [0, 1],
    values: [1.0, 2.0],
  ),
));

----------------------------------------

TITLE: Configuring Retry Parameters in Upstash Vector SDK - Python
DESCRIPTION: Demonstrates how to customize the retry mechanism in the upstash-vector SDK by setting the number of retries and interval duration. The example shows initialization with 5 retry attempts and a 2-second interval between retries.

LANGUAGE: python
CODE:
from upstash_vector import Index

# Try 5 times with a 2-second interval between retries
index = Index.from_env(retries=5, retry_interval=2.0)

----------------------------------------

TITLE: Upserting Single Data Entry in TypeScript
DESCRIPTION: Demonstrates upserting a single data entry that will be converted to a vector. Includes text data and associated metadata.

LANGUAGE: typescript
CODE:
await index.upsert({
  id: "1234",
  data: "'The Lord of the Rings' follows Frodo Baggins and his allies on a quest to destroy a powerful ring and save Middle-earth from the dark lord Sauron.",
  metadata: {
    title: "Lord of The Rings",
    genre: "drama",
    category: "classic",
  },
});

----------------------------------------

TITLE: Error Handling for Resumable Queries in Python with Upstash Vector Database
DESCRIPTION: This snippet demonstrates error handling when attempting to fetch more results or stop a query that has already been stopped, using pytest for both synchronous and asynchronous scenarios.

LANGUAGE: python
CODE:
with pytest.raises(ClientError):
  query.fetch_next(1)
  query.async_fetch_next(1)

for async with pytest.raises(ClientError):
  query.stop() # or await query.async_stop() for async

----------------------------------------

TITLE: Deleting Vectors by ID from Specific Namespace using cURL in Upstash Vector Database
DESCRIPTION: This cURL command shows how to delete vectors by their IDs from a specific namespace in Upstash Vector Database. It sends a DELETE request to the API endpoint with the namespace specified in the URL path and an array of vector IDs to be deleted.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/delete/ns \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "ids": [ "id-0", "id-1" ] }'

----------------------------------------

TITLE: Enabling Nested Event Loops in Jupyter
DESCRIPTION: Code snippet to enable nested event loops when using Jupyter Notebook.

LANGUAGE: python
CODE:
import nest_asyncio
nest_asyncio.apply()

----------------------------------------

TITLE: Fetching Vectors from Specific Namespace using cURL
DESCRIPTION: Example of fetching vectors from a specific namespace using cURL with multiple vector IDs

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/fetch/ns \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "ids": ["id-0", "id-1"], "includeMetadata": true }'